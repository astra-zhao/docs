{
  "products/chatbot-platform/intent.html": {
    "href": "products/chatbot-platform/intent.html",
    "title": "意图识别 | Chatopera文档中心",
    "keywords": "意图识别 服务概述 意图识别 是语义理解的一个重要话题，我们可以认为：与机器人对话时，是需要机器首先理解人的意图的。然后，根据这个意图，机器人继续与人进行问答，得到了这个意图的相关信息，然后机器才去执行这个意图代表的任务。 创建和配置机器人 初次使用首先需要新建一个机器人，并对其进行配置。机器人的配置主要包括意图和词典的配置，分别对应【意图】和【词典管理】模块。 添加意图和词典 进入机器人配置页面，需要新建和编辑意图，意图的编辑包括用户说法和槽位。在添加意图的槽位时需要对词典进行相关配置，包括新建自定义词典或引用系统词典，并在意图配置完成后 为所需的自定义词典添加词条。 测试和发布机器人 机器人配置完成后必须先通过训练，才可以对机器人进行测试。测试无误后便可在【意图>>发布管理】模块对调试版本进行发布上线，发布后的线上版本可用于实际使用。 接入机器人 若机器人已存在生产版本，可通过 API 文档提供的接口进行接入。 快速开始 登录服务 访问 https://bot.chatopera.com 从浏览器打开后，点击“立即使用”，跳转到登陆/注册页面，输入邮箱和密码，使用“回车键”【Enter】提交，即完成。 点餐机器人 下文以“餐饮机器人”为例介绍 机器人 的创建、配置和发布上线。 新建机器人 在 Chatopera 云服务首页单击“创建机器人”，根据提示信息新建后点击“确认”，即完成机器人的创建。 创建机器人 创建机器人 新建意图 切换至【意图】模块新建意图，以订外卖的意图为例，单击操作列的【新建意图】，在弹出的对话框中输入意图标识名，例如：Take_out，确定后即完成意图创建。 新建意图 编辑意图 单击操作列的 Take_out【编辑】，进入意图的配置页面，包括【用户说法】和【槽位】两个模块。 编辑意图 编辑意图 逐一添加各个模块，例如：【用户说法】添加带槽位和不带槽位的用户说法 用户说法 【槽位】添加槽位并进行相关设置 槽位 新建和配置自定义词典 在配置意图的槽位时需要为各个槽位设置对应的词典，此时可在【槽位】配置模块选择词典时快速新建词典，或引用系统词典 选择词典 也可先保存意图配置后，切换到【词典管理】模块新建自定义词典 新建自定义词典 无论通过哪种途径新建自定义词典，都需要在【词典管理】模块对自定义词典进行配置，添加词条 【词典管理】【自定义词典】列表点击“编辑”进入词典编辑页面 编辑词典 词典详情页面可以添加多个同义词与近义词，添加后进行保存 编辑词条 训练机器人 在意图详情页面，点击保存，提示：训练成功，可进行测试 保存 点击意图详情页面右上角“测试”按钮，进入测试对话页面 测试 测试 测试对话窗口输入意图中的用户说法对机器人进行训练，机器人识别到意图后会对该意图下添加的槽位进行追问 对话 机器人识别到所有槽位后会结束对话，建立新的会话 建立新的会话 发布机器人 每次机器人训练通过后，都会自动更新【版本管理】模块中的调试版本： 调试版本 机器人存在调试版本时，可进行测试，测试无误后可对当前调试版本进行发布上线 发布上线 词典管理 梳理需求 明确需求是什么：这个机器人实现什么样的对话能力？例如我们需要的是帮助用户来定一份外卖，那么问题就是建立一个定外卖的意图。 分析这个意图需要的词典：例如订一份外卖需要知道用户想定什么外卖，什么时候定，定多少，以及口味要求和地址。那么此时需要的词典就包括：food（食物）、time（时间）、num（数量）、taste（口味）、address（地址） 接下来就可以通过这些分析结果来创建一个意图了 自定义词典 命名规则与创建、修改中文名、删除 命名规则： 词典标识名为字母、数字、下划线的组合，1-32 位，如：RailTypes 同一个机器人下的词典标识名不能重复 词典标识名一经确认后无法进行修改 创建： 在词典管理页面点击新建自定义词典，在弹出的对话框里输入正确的自定义词典名称，点击确定 新建自定义词典 新建自定义词典 如果创建的自定义词典名称不符合要求，会有相应的提示 不符合要求 修改中文名：对于已经创建的自定义词典可以修改中文名 修改中文名 删除：对于不需要的自定义词典点击删除按钮即可 删除自定义词典 删除自定义词典 对于已经绑定了槽位的自定义词典不可删除 不可删除 编辑自定义词典 添加词条的方法 请使用分号；分隔词项，第一个词项将作为标准词，后面的词项将作为同义词。 词条的增删改查 添加词条：编辑完成后点击添加或者回车 添加词条 删除词条：对于不需要的词条可以进行删除，点击删除按钮即可 修改词条：一个词条的标准词一旦确定不可修改，但是同义词可以修改，点击编辑按钮，出现输入框，可以对同义词进行修改 修改词条 查找词条：对于词条较多对词典来说，可以快速搜索词条。在搜索框输入需要搜索的词条之后点击放大镜或者点击回车键即可搜索。搜索完成后搜索框中出现一个清除按钮，点击之后清除本次搜索 查找词条 保存 在编辑完所有词条之后，需要进行保存。或者本页词条有变更的情况下进行翻页或者搜索，都需要先进行保存。保存并且训练成功有提示 保存 保存 自定义词典的维护 为了用户体验更好，需要对自定义词典进行维护与管理 创建时：在创建词典添加词条时，尽可能多的，全面的添加不同的词条和同义词，便于在槽位中被识别出来（如果用户说的词条在该自定义词典中没有，就会识别不出来） 使用时：在历史消息中可以查看所有机器人与用户的对话，如果发现用户说的词条在该自定义词典中没有，应该立即加上 系统词典 展示系统词典 系统词典可以直接引用，无需配置词条。已有的系统词典包括：地名(@LOC)，人名(@PER)、时间(@TIME)和组织机构(@ORG)。在引用系统词典页面中可以看到 系统词典 各个系统词典的作用 名称 描述 示例 @LOC 地名 北京市、东京 @PER 人名 郭德纲、于谦 @TIME 时间 今天、下午一时 @ORG 组织机构 北京华夏春松科技有限公司 系统词典引用与取消引用 对于系统词典可以引用和取消引用。被引用了的系统词典可以在槽位配置时使用 引用与取消 意图管理 创建意图 命名规则与创建 命名规则： 意图标识名为字母、数字、下划线的组合，1-32 位，如：RailTypes 同一个机器人下的意图标识名不能重复 意图标识名一经确认后无法进行修改 创建： 在意图管理页面点击新建自定义词典，在弹出的对话框里输入正确的自定义词典名称，点击确定。与新建自定义词典一样 编辑意图 槽位管理 添加槽位：添加槽位时可以选择应用系统词典或自定义词典，可以设置是否必填和追问（必填的话必须设置追问） 槽位引用系统词典 槽位引用自定义词典 槽位是否必填与追问 添加槽位 删除槽位：对于不需要的槽位可以进行删除，点击删除按钮即可 修改槽位：对于需要修改的槽位，直接进行编辑和修改即可 修改槽位 说法管理 添加说法：对于用户的说法，可以添加没有槽位的说法，也可以用{}关联槽位，把槽名称放到{}里面即可 添加没有槽位的说法 添加绑定槽位的说法：一个说法可以绑定多个槽位 添加说法 删除说法：对于不需要的说法可以进行删除，点击删除按钮即可 修改说法：对于需要修改的说法，直接进行编辑和修改即可 保存 在编辑完所有说法和槽位之后，需要进行保存。保存并且训练成功有提示。成功就可以到测试对话页面进行测试了 保存 版本管理 调试版本 每次保存并且训练成功后，都会自动更新调试版本。但是此时不该急于发布上线，需要多次在测试对话页面进行测试，确保无误之后，再发布上线 测试：在测试对话页面与机器人进行对话。在右侧会把对应的意图、槽位以及槽位值之类的信息展示出来 测试 生产版本 在调试版本中经过测试病确保无误之后，可以点击发布上线。上线后为生产版本 生产版本 系统集成 查看使用情况 在统计页面查看意图识别对话检索次数 生产版本 查看历史消息 评论"
  },
  "products/chatbot-platform/faq.html": {
    "href": "products/chatbot-platform/faq.html",
    "title": "知识库 | Chatopera文档中心",
    "keywords": "知识库 知识库是基于信息检索系统的一问一答的问答服务，通过建立【问题-扩展问-答案】和近义词实现智能问答，常用于常见问题集的机器人对话。 知识库管理 问答对 新建 创建问答对 编辑 调试知识库 调试命中率 系统集成聊天机器人时，发送的知识库检索或多轮对话检索，会返回置信度 score （也称为命中域值），该值在[0~1]区间，值越大代表机器人越确定回复的准确性。 对知识库的评测，常常用一系列测试问题查询返回结果，进而计算机器人回答的准确率评价检索系统。 在系统集成时，常常设定一个置信度，在高于该值时，可以将机器人的回复返回给消费者。或在某个区间时，询问消费者 是否问以下问题 ，这是目前智能客服常见的场景。 通过知识库管理页面的命中率调试窗口，开发者可以调整置信度（也称为命中域值）来调试知识库。 启用/禁用问答对 在问答对列表，使用 拨动开关 切换状态。 导入知识库 Chatopera 云服务支持导入一个文件，批量创建问答对。 导入知识库 目前，该文件格式必须为**.xlsx**，并且在表头注名各列的含义。 列 含义 说明 第一列 是否开启 问答对在知识库中有 启用/禁用 两个状态，只有 启用 的问答对在检索时有效。 禁用 状态的问答对可以是草稿，被废弃但是不想删除等情况。 第二列 问题 用文本描述的问题 第三列 答案 用文本描述的答案 第四列 *扩展问 1 问题的另一种问法 第五列 *扩展问 2 问题的另一种问法 第六列 *扩展问 3 问题的另一种问法 其中， 第一列 ， 第二列 ， 第三列 是必填项，扩展问不是必填项，但是扩展问越多，机器人越智能。 另外， *扩展问 N 必须出现在当列有值的时候，用户可以添加多个扩展问。 在知识库管理页面，也有下载 知识库模版 文件的链接。 导出知识库 用户可以随时将知识库文件导出，导出文件可以更好的使用其他工具编辑，或作为备份，导出文件的格式为 Excel。 近义词 提示：目前添加近义词是可以优化命中率的，但近期会升级优化这部分，得到更显著的提升。 近义词是另一种增加聊天机器人智能化水平的另外一个手段。 新建 在知识库管理页面，点击 近义词 ，就可以看到 新建 按钮。 编辑 创建近义词 知识库小助手 Chatopera 知识库小助手（简称“小助手”）是面向企业的客户服务人员发布的一款从 知识库 检索建议回复的桌面软件。长期以来，客户服务占据着企业运营的重要位置，因为回复不及时、不标准和不准确都会给企业造成损失，对于常见问题集的管理，主要使用的工具是 Excel，客服人员想要快速回复客户消息非常困难，同时也有不容易维护的问题，小助手就是专门用于解决这个问题而开发的。 产品亮点 易于配合其他应用，通过复制面板和粘贴面板工作。 悬浮窗口，占用很小空间。 设计简洁，和桌面背景百搭。 下载和安装 提示： 目前，小助手只支持Windows客户端。 下载地址： 版本 操作系统 下载 v1.0.0 Windows 7 或更高版本 链接 在下载后，浏览器可能提示“这种类型的文件可能会损坏您的计算机”或者“Windows Defender SmartScreen 已组织启动一个未识别的应用。”，这时请点击“保留”及“更多信息”进行下一步。 点击“仍要运行” 配置 Chatopera小助手 双击图标，启动小助手，看到如下配置界面。 配置小助手 邮箱一栏填写正确的电子邮箱地址。 获取应用 ID 和密钥 提示 Chatopera云服务: Client ID对应\"应用ID\" Secret 对应\"密钥\" 安装完成后，可以在启动菜单和桌面看到“Chatopera 小助手”的快捷方式。 已经具备了应用 ID 和密钥的用户跳过此步。作为团队组长/企业主管等角色使用或作为个人用途，可以通过注册 Chatopera 云服务 ，然后创建聊天机器人获得。 获得应用ID和密钥 这三项都属于必填项，填写好后点击“保存”。 获得智能建议回复 保存设置后，小助手是置顶在桌面的，在小助手的最右侧是切换 启用 和 停用 状态的按钮。 悬浮状态下的小助手 工作时，您可能处于不同的聊天软件中，甚至是文档中，都可以通过复制文本获得建议回复。比如，下面是在 QQ 群中，快速回复一个问题，就把这个问题复制到粘贴板，通常是通过【Ctrl + C】完成。 复制问题 这时，小助手就从机器人的知识库中查询相似问题，并按照 问题相似度 展开一个智能建议回复列表。 点击一个相似问题，就将该问题 答案 复制到粘贴板 ，再粘贴该答案到聊天窗口，通常通过 【Ctrl + V】完成。 所以，这个过程可以简单的描述为 复制->点击->粘贴 。 临时停用 小助手处于 启用 状态时，每次执行文本复制操作都会做智能建议回复的查询，被复制内容会被发送到远程服务，为了保护用户隐私，您可以临时停用小助手，这时并不执行智能建议回复，您的隐私数据也就得到保护。 在任何状态，任何理由下，Chatopera 不会在未取得用户允许的情况下，获取或利用用户的隐私数据。 停用状态下的小助手 退出 彻底关闭小助手，在小助手的悬浮区域右键，在弹出的菜单中点击“退出”。 退出小助手 评论"
  },
  "products/cskefu/work-chatbot.html": {
    "href": "products/cskefu/work-chatbot.html",
    "title": "机器人客服 | Chatopera文档中心",
    "keywords": "机器人客服 企业需要快速回复客服问题，当前市场上，存在很多厂商能提供全渠道智能客服系统，相对来说，渠道对接已经非常成熟，集成起来容易。但是在机器人客服上，用户体验参差不齐。在 Chatopera，我们主要关注智能机器人，追求最好的机器人客服体验：快速实现符合业务需求的聊天机器人，效果稳定。 用户服务环节 在 Chatopera，客服机器人将加入到聊天室中，它有两种参与客户服务的方式： 辅助客服人员 接管聊天室，直接和消费者沟通 机器人客服 具体地说，在排队阶段，引导消费者问问题，借助 智能问答引擎 服务，进行意图识别，如果意图匹配到了智能问答引擎中的多轮对话，就启动多轮对话，完成服务；未匹配到多轮对话则继续排队，在客服人员接入会话时，机器人客服针对消费者的问题，给客服人员建议回复。 针对不同企业客户的需求，机器人客服的服务方式也可以调整，最主要的是，机器人客服可以利用多轮对话和知识库，提高用户满意度，提高效率，人工坐席专注于更加棘手的问题。 创建网站渠道 以管理员身份 春松客服坐席工作台 ，导航【系统-客服接入-网站列表-创建新网站】，按照如下内容设置网站渠道。 项目 值 描述 网站名称 localhost 任意字符串 网站地址 localhost 网站的域名或 IP 创建网站渠道 点击【立即提交】保存。 创建聊天机器人 登录 Chatopera 云服务 ，注册并在【控制台】中创建聊天机器人。 创建聊天机器人 项目 值 描述 机器人名称 小 C 机器人的名字，创建后不能变更 描述 机器人客服 机器人的描述 语言 zh_CN 机器人的语言为中文 机器人具有多轮对话和知识库两个管理对话能力的组件，在创建好机器人后，创建一个问答对作为测试示例。点击【知识库】图标，点击【新建问题】。 新建问答对 项目 值 描述 问题 缴费年期变更后，佣金如何计算？ 问题的文本 答案 变更后仍有佣金的，按照变更后的年期对应的提佣率计算佣金。 问题的答案 点击【确定】。 集成机器人的方式是通过 SDK 创建机器人实例，使用机器人接口进行对话和查询等。机器人实例的认证和授权是通过 ClientId 和 Secret 完成，点击【设置】查看 ClientId 和 Secret 。 查看ClientId和Secret 集成机器人客服 以管理员身份 春松客服坐席工作台 ，导航【智能机器人-新建机器人】，按照如下内容填入创建表单。 项目 值 描述 网站渠道 localhost 根据网站地址选择网站渠道 ClientId xxx Chatopera 云服务 ClientId Secret xxx Chatopera 云服务 Secret 工作模式 机器人客服优先 目前支持【机器人客服优先】或【人工客服优先】两种类型 描述 机器人客服 对机器人的简要介绍 集成机器人客服 点击【保存】创建机器人，返回机器人列表页面，可以找到刚刚创建的机器人客服，创建后，默认状态，机器人是不开启的，在列表页通过【是否开启】设置该机器人为 开启 ，如下图所示。 开启机器人客服 测试机器人客服 提示：春松客服访客测试端地址 http[s]://春松客服IP[:PORT]/testclient.html 使用浏览器打开 春松客服访客测试端 ，并点击【在线客服】。在知识库设置好后，当访客在客户端问问题，匹配了知识库的问题后，机器人就自动回复。 比如输入： 缴费年期变更后，佣金如何计算？ ，能得到在知识库中设置的答案。 访客端和机器人对话 如果想使机器人变得更加智能，需要参考关于 Chatopera 云服务 的更多介绍。 问候语 在默认情况下，机器人的问候语是在 Chatopera 云服务的机器人属性页面进行设置，该设置只支持简单的文本。 设置机器人问候语 春松客服访客端 访客登录进入客服聊天窗口往往是有一些问题要咨询的，所以更为合理的用户体验是将一些常见问题作为导航用途显示在问候语下面，比如这样： 常见问题列表 在春松客服里，为了支持各种丰富的对话场景，这些功能都是使用多轮对话配置。接下来的介绍假设您已经学习了 多轮对话设计器 的内容， 如果您还没有学习这部分内容，建议先完成，大约需要 30 分钟时间 。 下面是支持在问候语中关联热门问题，进行导航的方法： 下载安装多轮对话设计器 下载多轮对话设计器 下载连接也可以通过 多轮对话设计器使用教程 获得。 新建聊天机器人 新建聊天机器人 新建对话技能 新建对话技能 此处，对话名称可以使用字母、数字和下划线组成的字符串填写。 粘贴技能脚本 在该机器人的技能列表中，点击刚刚创建的技能的“编辑”按钮，并在新打开的编辑窗口中，选择“脚本”，将下面的几行内容粘贴到编辑窗口中。 // FAQ Hotlist + __faq_hot_list - ^get_greetings() 点击【保存】，在编辑窗口中，如图。 粘贴技能脚本 该规则 __faq_hot_list 将保证在访客和机器人连接成功后， 机器人发送函数 get_greetings 返回的内容。此处 __faq_hot_list 是固定的， get_greetings 函数名和下面的技能函数名保持一致便可。 粘贴技能函数 // 问候语中关联常见问题 exports.get_greetings = async function() { return { text: \"请问有什么可以帮到您？\", params: [{ label: \"1. 产品列表\", type: \"qlist\", text: \"产品列表\" }, { label: \"2. 当季热销产品\", type: \"qlist\", text: \"当季热销产品\" }, { label: \"3. 退换货咨询\", type: \"qlist\", text: \"退换货咨询\" }] }; } 点击【保存】，在编辑窗口中，如图。 粘贴技能函数 在函数中，可以自定义热门问题的文字，顺序。文字即访客看到的文本内容，通过 label 设定，当访客点击一个问题时，聊天机器人将收到 text 设定的文本。您可以在知识库或多轮对话中，设置该文本的回复内容。 访客对于热门问题列表，可以点击多次。 导出聊天机器人 多轮对话设计器是企业聊天机器人的设计环境， Chatopera 云服务 或 智能问答引擎 是机器人的运行时环境。 发布并导出对话应用 导出后，多轮对话设计将该机器人多轮对话保存为一个 .c66 后缀的文件。 发布聊天机器人 登录 Chatopera 云服务，在目标机器人的多轮对话管理面板中，导入对话应用( .c66 )文件。 导入Chatopera云服务 上线后使用 在导入成功后，在春松客服中，访客再次登录聊天窗口，就会收到带有热门问题的问候语。 按钮消息 另外一种情况是机器人客服回答一个选择列表，访客点选按钮进行选择。 按钮消息 粘贴技能脚本 可以在上面步骤中建立的技能中，添加新的规则： + (*) 产品列表 (*) - ^get_products() 该规则将保证在访客的问题中有 产品列表 时，发送函数 get_products 返回的内容。 粘贴技能函数 // 按钮选择消息 exports.get_products = async function() { return { text: \"您对下面哪个产品感兴趣\", params: [{ label: \"上衣\", type: \"button\", text: \"介绍一下上衣\" }, { label: \"服装\", type: \"button\", text: \"介绍一下鞋帽\" } ] } } 在脚本中，只需要设定 params 中的内容作为选型，其他保持默认。 图文消息 春松客服还支持的一类消息是图文消息，通过是分享一个链接，展示链接的图片和简介。 按钮消息 粘贴技能脚本 可以在上面步骤中建立的技能中，添加新的规则： + 介绍一下上衣 - ^get_shangyi() 该规则将保证在访客的问题中有 介绍一下上衣 时，发送函数 get_shangyi 返回的内容。 粘贴技能函数 // 图文消息 exports.get_shangyi = async function() { return { text: \"{CLEAR} 图文消息\", params: [{ type: 'card', title: \"秋冬上衣优选\", thumbnail: \"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=277597165,2202071991&fm=15&gp=0.jpg\", summary: \"秋冬上衣优选秋冬上衣优选秋冬上衣优选秋冬上衣优选秋冬上衣优选秋冬上衣优选秋冬上衣优选秋冬上衣优选\", hyperlink: \"https://www.1688.com/huo/B6F9CDAFD7B0C5AEBAA2CDE2CCD7BCD3BAF1C9CFD2C2C7EFB6AC.html\" }] } } 其中， title 代表大标题， thumbnail 是图片， summary 是简介， hyperlink 是点击图文消息后，跳转的链接，这几项是用户可以自定义的，其它项就使用默认值，比如 type 的值必须是 card 。 文本消息、热门问题、按钮消息和图文消息是春松客服支持的在线机器人客服消息类型。在掌握了知识库、脚本语法和函数后，用户可以支持各种客服场景。 快速开始 在上面的介绍中，Chatopera 的多轮对话机器人通过 c66 文件进行分发，Chatopera 提供了在问候语中关联热门问题的多轮对话应用示例文件( 小松.1.0.7.c66 )，您可以点击 下载链接 获得这个应用。 该对话可以导入到多轮对话设计器中，进行浏览脚本和函数；也可以直接导入到 Chatopera 云服务，然后在春松客服中进行体验。 评论"
  },
  "products/cskefu/visitor-webim.html": {
    "href": "products/cskefu/visitor-webim.html",
    "title": "网页聊天控件 | Chatopera文档中心",
    "keywords": "网页聊天控件 提示： 网页聊天支持可以适配移动设备浏览器，桌面浏览器。 可以在电脑，手机，微信等渠道接入网页聊天控件。 获取网页脚本， 系统 -> 系统管理 -> 客服接入 -> 网站列表 -> 点击“Chatopera 官网” -> 基本设置 -> 接入； 将图中的代码复制到一个 Web 项目的页面中，例如下图的。 使用浏览器打开该 Web 页面。 【提示】该网页需要使用 http(s)打开，不支持使用浏览器打开本地 HTML 页面。 点击该网页中出现的“在线客服”按钮，出现聊天窗口，可以作为访客，与客服聊天了。 【提示】春松客服提供一个测试网页客户端的例子，可以使用 http://{{春松春松客服IP:[PORT]}}/testclient.html 进行访问。 评论"
  },
  "products/cskefu/videos.html": {
    "href": "products/cskefu/videos.html",
    "title": "产品介绍视频 | Chatopera文档中心",
    "keywords": "产品介绍视频 《春松客服产品系列视频》 序号 内容 腾讯视频 百度网盘 No. 1 产品概述 观看 下载 No. 2 安装部署 观看 下载 No. 3 功能演示 观看 下载 No. 4 账号体系 观看 下载 No. 5 客户关系管理 观看 下载 No. 6 即时通信 观看 下载 No. 7 呼叫中心 观看 下载 No. 8 数据报表 观看 下载 下载视频合集 评论"
  },
  "products/cskefu/reports.html": {
    "href": "products/cskefu/reports.html",
    "title": "数据报表 | Chatopera文档中心",
    "keywords": "数据报表 任务列表 左侧菜单 -> 外呼系统 -> 任务列表 坐席报表 左侧菜单 -> 外呼系统 -> 坐席报表 外呼日报 左侧菜单 -> 外呼系统 -> 外呼日报 通话记录 左侧菜单 -> 外呼系统 -> 通话记录 评论"
  },
  "products/cskefu/monitoring.html": {
    "href": "products/cskefu/monitoring.html",
    "title": "坐席监控 | Chatopera文档中心",
    "keywords": "坐席监控 查看历史会话 左侧菜单 -> 会话历史 -> 历史会话 查看当前会话 左侧菜单 -> 会话历史 -> 当前会话 查看排队队列 左侧菜单 -> 会话历史 -> 排队队列 查看访客留言 左侧菜单 -> 会话历史 -> 访客留言 查看满意度统计 左侧菜单 -> 统计功能 -> 满意度统计 查看全部坐席 左侧菜单 -> 会话历史 -> 坐席信息 -> 全部坐席 坐席监控 左侧菜单 -> 外呼系统 -> 坐席监控 评论"
  },
  "products/cskefu/index.html": {
    "href": "products/cskefu/index.html",
    "title": "春松客服 | Chatopera文档中心",
    "keywords": "春松客服 全渠道智能客服，客服系统是企业的重要工具，尤其是移动互联网时代，企业需要响应来自任何地点任何时间的客户，渠道也是多样性的。企业的口碑至关重要，企业服务需要在客户获得、客户激活、客户留存等阶段无懈可击。不管是微信公众号，还是电话外呼，或是 Telegram Messenger。 用户生命周期 产品定义 智能客服系统是拥有机器人客服、呼叫中心、数据分析、CRM 等功能于一身的新一代客服系统。将智能机器人与人工客服完美融合，同时整合了多种渠道，结合 CRM 系统，为客户打标签，建立客户的人群画像等，帮助企业向客户提供更加专业客服服务。 智能客服系统 是一个有能力打通企业各种应用的软件，尤其是市场、销售、售后相关的软件。 全渠道智能客服 Chatopera 推出的智能客服产品，即 春松客服 有下面的亮点： 开放源码，Apache2.0 授权证书 CRM 模块：管理联系人，客户 支持 IM 和呼叫中心 机器人客服，与 Chatopera 云服务 集成 会话弹屏，联系人打标签、笔记 数据分析，优化业务 支持公有云和私有化等多种灵活的部署方式 以容器化基础，安装使用，卸载等非常简单 演示环境 该地址任何人都可以访问，请勿创建真实信息和修改密码。 演示环境是为了帮助大家了解春松客服，一下是地址和管理员账号。 网站 用户名 密码 http://cc.chatopera.com/ admin admin1234 Chatopera 提供面向企业客户的现有客服系统的集成开发服务，欢迎洽谈。 联系方式：info@chatopera.com 技术咨询及售后服务 邮箱：info@chatopera.com 电话：158-0121-3126 QQ 群：185659917 服务水平协议&用户条款 跳转至 《春松客服：服务水平协议》& 《春松客服：服务条款》 阅读。 当前，Chatopera 提供春松客服的定制开发或私有部署服务，有合作意向的企业联系下面邮箱，进行洽谈： 联系方式：info@chatopera.com 洽谈内容包括： 开源社区合作 概念验证 试用申请 其他商业合作 对于企业服务，可提供发票。 评论"
  },
  "products/cskefu/callcenter.html": {
    "href": "products/cskefu/callcenter.html",
    "title": "呼叫中心 | Chatopera文档中心",
    "keywords": "呼叫中心 提示： 春松客服 on QingCloud 目前尚不支持呼叫中心模块。 呼叫中心只能用过其他方式部署。 预计在下一版本 春松客服 on QingCloud会支持，敬请期待。 简单定义：在一个相对集中的场所，由一批服务人员组成的服务机构．通常利用计算机通信技术，处理来自企业、顾客的电话垂询，尤其具备同时处理大量来话的能力，还具备主叫号码显示，可将来电自动分配给具备相应技能的人员处理，并能记录和储存所有来话信息。 春松客服支持呼叫中心业务，但是需要企业额外采购语音网关和客服电话，其中，客服电话可以使用软电话，软电话有免费版本(比如 YateClient，linephone，eyebeam)。 语音网关 软电话 关于具体搭建带有呼叫中心功能的春松客服系统，请联系我们(info@chatopera.com)。 呼叫中心服务需要保证系统至少有一个 SIP 坐席客服，即在春松客服系统中设置好的“呼叫中心坐席”。 自动批量外呼 (1) 语音交换网关正常：确保电话交换设备已经正常工作； (2) 呼叫中心坐席设置：确保需要作为坐席的用户具有“呼叫中心坐席”，已经拥有 SIP 地址； (3) 电话机/软电话设置：把 2 中的 sip 地址绑定在电话机/设置软电话中；这里设为 1003 (4) 技能组部门就位：需要一个部门，且已经启用了“技能组”功能，把 2 中的用户账号加在里面； (5) 拥有权限：把 “坐席对话”与“坐席工作台”授权给此部门； (6) 呼叫中心坐席上线：保证该坐席用户已经登录系统； (7) 创建任务：用管理员或者具有“外呼系统”->”任务列表”->”新建任务”的权限的账号创建一个拨号计划； (8) 初始化成功：确保创建的任务已经“初始化”完毕，可以执行“开始”任务； (9) 开始：开始执行任务； 不同操作的说明： “开始” 启动一个任务，对于已经开始了任务，此按钮将不能再被触发； “停止” 停止一个正在进行呼叫的任务，任务停止之后，此按钮将不能再被触发； “监控” 对于一个任务，我们都可以通过监控看到它的具体状态； “编辑” 对于一个任务可以再次编辑，目前编辑内容只能编辑“最大并发数”，“坐席并发比”，只有“已停止”的任务才可以编辑； “删除” 只能删除“已停止”的任务，删除之后会进入到“已删除任务”中，方便后期对数据进行分析； 不同状态的说明： “初始化”的呼叫计划不能“删除“，不能“开始“，也不能“暂停“； “初始化”后自动转移到“已停止”； “执行中”在系统打完所有电话后，自动转移到“已停止”； 除了“初始化”状态，无法删除外，其他状态都可以点击“删除”（执行中的计划会先停止，再删除）； “执行中”的呼叫计划，不能编辑，其他状态可以编辑，但是不能修改“电话号码”和“技能组”； 对于已经开始了的任务，具有以下的特点 “开始” 启动一个任务，对于已经开始了任务，此按钮将不能再被触发； 任务状态变为“执行中”； 客户会接到电话； 呼叫中心坐席 也会接到 电话响铃提醒； 同时当呼叫中坐席接通电话后会有自动弹屏 --“坐席工作台”； 呼叫中心坐席的对话列表会显示“在线”，并且头像旁边会显示一个正在接通的电话图标； 默认会把当前客户的相关信息记录在“坐席工作台”的表单中 ，不需要客服手动关联； 在通话过程中就可以记录此客户的是否意向等数据，最后直接一键保存到 CRM 数据库中； 开始执行任务，接通自动弹屏 (10) 被叫呼叫成功，客户会接到电话 (11) 挂断，一键保存数据； “呼叫中心坐席“的 ”对话列表”状态显示为“离开”，并且头像的电话显示为“灰色”； 可以对刚才的客户信息继续编辑或者直接保存到 CRM 数据库中； 如果保存了用户，并且成功，则下次再次呼出到此用户时，都可以关联到此信息，并且再次自动弹出，可以再次编辑。 (12) 监听拨号计划，暂停拨号计划。 (13) 删除拨号计划 手动外呼 (1) 在拥有 SIP 地址的电话机/软电话 拨打目标号码； (2) 开始：开始执行任务； (3) 被叫呼叫成功； (4) 呼叫中心坐席电话弹屏自动弹出，并且当前的客户信息已经自动填写在里面； (5) 挂断，更新数据，一键保存数据； 评论"
  },
  "products/cskefu/accounting.html": {
    "href": "products/cskefu/accounting.html",
    "title": "账号体系 | Chatopera文档中心",
    "keywords": "账号体系 进入春松客服后台界面，输入默认的账号密码(用户名: admin, 密码: admin1234)，点击立即登录。 进入春松客服首页 创建账号 创建用户账号： 系统 -> 系统概况 -> 用户和组 -> 用户账号 -> 创建新用户 提示: 电子邮件: 需要有效的格式 密码: 字母数字最少8位，手动录入 手机号: 全系统唯一 用户分为管理员和普通用户 坐席分为一般坐席和 SIP 坐席，普通用户与管理用户都可以成为坐席，SIP 坐席是在多媒体坐席的基础上 每个账号必须分配到一个部门下，以及关联到一个角色上，才可以查看或管理资源，请详细阅读【组织机构】和【角色】管理 创建普通用户 创建多媒体坐席 创建管理员 创建呼叫中心坐席 查看账号 查看用户账号列表： 系统 -> 系统概况 -> 用户和组 -> 用户账号 点击操作一栏中的“编辑”“删除”，可以对当前用户列表中的所有用户的信息进行编辑或者删除 创建部门 创建部门 系统 -> 系统概况 -> 用户和组 -> 组织机构 -> 创建部门 ，并且可以启用或关闭技能组 名词解释： 部门 需要创建的部门名称 上级机构 选择上级部门 启用技能组 这里启用与否，主要决定当前组织结构是否具有外呼的权限 更新、删除部门 部门列表 系统 -> 系统概况 -> 用户和组 -> 组织机构 编辑(修改)部门 系统 -> 系统概况 -> 用户和组 -> 组织机构 -> 修改部门 删除部门 系统 -> 系统概况 -> 用户和组 -> 组织机构 -> 删除部门 管理部门人员 部门添加用户 系统 -> 系统概况 -> 用户和组 -> 组织结构 -> 选中一个部门 -> 添加用户到当前部门 可以把已经存在的 用户账号 添加到一个特定的部门中 一个用户账号只能隶属于一个部门 设置部门地区 部门地区设置 系统 -> 系统概况 -> 用户和组 -> 组织结构 -> 选中一个部门 -> 地区设置 角色设置 创建角色 系统 -> 系统概况 -> 用户和组 -> 系统角色 -> 新建角色 名词解释： 角色 系统中用户的操作权限是通过角色来控制，角色可以理解为具备一定操作权限的用户组； 可以把一个或者更多的用户添加到一个角色下； 可以给一个角色设置一定的系统权限，相当于这个角色下面的用户有了这些系统权限； 编辑(修改)角色 系统 -> 系统概况 -> 用户和组 -> 系统角色 -> 修改角色 删除角色 系统->系统概况->用户和组->系统角色>删除角色 角色添加用户 系统->系统概况->用户和组->系统角色>添加用户到角色 评论"
  },
  "products/chatbot-platform/history.html": {
    "href": "products/chatbot-platform/history.html",
    "title": "历史记录 | Chatopera文档中心",
    "keywords": "历史记录 在机器人的一级菜单，可以进入历史记录列表，左侧是和该机器人对话的用户们，按照最近联系时间降序排列。选择一个用户，右侧展示详细的聊天历史。 对话历史 评论"
  },
  "products/chatbot-platform/conversation.html": {
    "href": "products/chatbot-platform/conversation.html",
    "title": "多轮对话 | Chatopera文档中心",
    "keywords": "多轮对话 多轮对话是 Chatopera 云服务的特色功能，聊天机器人开发者可以使用\"多轮对话设计器\"实现满足企业业务需求的聊天机器人。多轮对话基于规则，使用 对话脚本 ，并结合 JavaScript 函数 实现固定话术和固定流程的聊天服务。 多轮对话管理 多轮对话设计器 多轮对话设计器 (Conversation Designer）是以自然语言为输入，定义聊天机器人逻辑思维的工具。它可以很方便的通过 Chatopera 支持的脚本语法描述复杂的对话逻辑，并且通过函数的形式集成企业的其它服务。 企业的业务人员 可以很容易的学习脚本语法，制作满足企业业务需求的聊天机器人。 多轮对话设计器 是设计满足业务需求的对话机器人的 PC 端应用程序，现已支持 Windows 和 Mac OSX 平台。多轮对话能力是聊天机器人模仿人的对话能里的一大挑战，在复杂的上下文和需要很多背景知识的前提下，现有的人工智能技术是无能为力的，在 Chatopera，我们相信在企业服务中，当话术或流程固定的情况下，依赖 Chatopera 的产品可以输出用对话完成任务的服务，比如用对话完成点餐、报销、请假。这些对话可以在企业的聊天工具中，也可以通过智能音箱的等其他客户端。 安装 仅支持 Mac OSX 和 Windows 操作系统。 下载地址 下载地址： 版本 操作系统 下载 v1.0.1 Mac OSX 链接 v1.0.1 Windows 链接 MacOS： dmg 为文件后缀的安装文件，双击打开，根据安装向导安装。 Windows： exe 为文件后缀可执行文件，双击打开，根据安装向导安装。 启动应用 安装完打开应用程序，如下图： 多轮对话设计器打开后页面 可能遇到的问题 1. Macos 上首次启动警告 MacOS权限问题 解决方案 在应用中心，找到“多轮对话设计器”： 应用中心 选择“多轮对话设计器”并且右键： 右键打开 点击“打开”(“Open”)。 快速开始 下载安装包后，双击打开，进入安装向导。 安装完打开应用图标后进入主面板，如下图： 应用主面板 导入示例程序 下载示例程序包文件：小叮当-1.0.0-conversations.c66 https://github.com/chatopera/conversation-sampleapp 示例程序下载地址 在主面板点击界面的右上方的“导入”按钮，选择刚才下载的示例程序 小叮当-1.0.0-conversations.c66 如图： 导入对话框 导入成功，可以看到在聊天机器人界面有一条数据显示，“名字 小叮当”等；点击小叮当的“管理”按钮，可以看到它的多轮对话列表，包括：chatopera，profile，weather。如下图： 多轮对话列表 对话 功能 chatopera 关于 Chatopera 的公司信息 profile 机器人的画像 weather 提供天气查询功能的对话 测试示例程序 可以针对上面的三个多轮对话，进行一番聊天测试，下面测试主要以“问天气”为例子。 选择 “weather” 对话的编辑按钮，进入 weather 对话的编辑窗口，包括： 概念 描述 脚本 按照多轮对话语法规则来描述机器人对话逻辑 函数 执行 JavaScript 代码的环境，声明的接口可以直接从脚本中调用 日志 函数中 debug 方法的输出 逻辑 聊天机器人的思维逻辑导图，保存脚本后自动生成 对话 实时测试聊天机器人的窗口 在“对话”区域的下方输入框输入： 你知道哪些天气信息 多轮对话编辑窗口 点击“发送”按钮，可以看到对话区域有了问答的信息流，并且“逻辑”区域也有了对话状态，对话路径显示“绿色”高亮。 测试对话 在此界面可以进行多轮对话测试，如下截图： 多轮对话 增加新的对话 测试新对话 我：今天北京适合游玩么？ 机器人：风清气爽，当然可以啊～ 在脚本区域可以自行设计脚本，非常简单，例如增加： + 今天 (*) 适合游玩么？ - 风清气爽，当然可以啊～ 点击界面上方“保存”按钮，会使得刚才定义的对话生效，并且可以在聊天区域直接测试。 保存新版本 刚才点击“保存”按钮时，同时将 weather 的对话生成一个快照，我们随时可以回退到某个快照。 查看快照 回到聊天机器人列表页面，可以点击“发布”按钮，可以将当前聊天机器人生成新版本，相关的信息如图： 发布新版本 点击上图的“确认”按钮，发布新版本成功，点击“版本管理”，看到刚才发布的 1.0.1 版本的信息。 各个版本之间比较 对于聊天机器人的发布的各个版本差异，可以使用版本比较工具，比较具体的差异，包括：脚本比较和函数比较。 点击上图 1.0.1 对应的“对比差异”，可以“对比变化”界面，其中分为三个部分， - “左上”为被对比的参考版本；本例子为:1.0.0 - “右上”为要对比的目标版本，本例子为:1.0.1 - “下方”为两版本数据的差异，具体： * 绿色：新增的内容； * 红色：删除的内容； * 灰色：没有变化的内容； 刚进入“对比变化”界面，默认对比的是：函数，本例子请在选择“版本号”的右边切换“脚本”为“对话”，如图： 版本之间比较差异 对比的差异部分为绿色，表示新增。 导出特定版本 多轮对话设计器属于设计阶段，在机器人满足需求后，可以导出为对话应用.c66 文件，方便分发和部署。在生产环境，导入到 智能问答引擎 中，作为多轮对话应用的运行时。 在“版本管理”界面，选择刚才发布的“1.0.1”的“导出”，可以选择一个路径存储该导出的文件，如图： 导出文件 脚本语法 术语 在正式介绍脚本语法前，我们先来认识下面的术语： 概念 描述 对话 满足设定需求的多轮对话 输入 用户向聊天机器人发送的消息的文字形式 触发器 匹配用户输入文字的字符串，可以声明槽位，当用户的输入发生时，会按照算法顺序匹配触发器 回复 机器人回复用户输入的文字 多轮对话 根据上一次回复的状态，声明下轮对话的优先匹配规则 函数 可以从脚本中接受输入，并通过 JavaScript 执行任务返回结果的代码 对话 触发器 触发器是对话的基础，当用户向聊天机器人发送一条消息时，机器人引擎会从所有定义的触发器中找到匹配的一个。在机器人引擎中，触发器用半角字符加号（ + ）表示。机器人的回答用半角字符减号（ - ）表示。 例如，我们可以这样定义一个对话： + 晚饭吃什么 - 北京烤鸭 注意 ：这里（ + ）和（ - ）和文字之间需要隔一个空格。 槽位 为了让触发器能适应复杂的需求，机器人引擎使用槽位规则，槽位既能让规则具有更好的匹配能力，也能让回复和函数中使用不同槽位的值。 注意 ：下面的某些槽位左右带有空格，这些空格是必须的。 通用槽位 解释示例：通用槽位 匹配：客服你好 匹配：你好 匹配：你好吗 通用槽位会匹配零到无穷个字符、单词。此处的输入也会被系统捕获或者存储。 + (*) 你好 (*) - 欢迎光临 确定长度槽位 解释示例：确定长度槽位 匹配：早安北京 不匹配：早安乌鲁木齐 如果你知道你想要的字符长度，可以试试确定长度槽位。此处的槽位可以被系统捕获，而且可以在回答中使用 语法为： *n , 其中 n 代表长度。 + 早安 *2 - 早安 可控长度槽位 解释示例：可控长度槽位 匹配：早安 匹配：早安北京 匹配：早安哈尔滨 匹配：早安乌鲁木齐 不匹配：早安君士坦丁堡 如果只想匹配一些字符，可控长度的槽位是个不错的选择。语法为： *~n , n 代表你想匹配的最大长度 + 早安 *~4 - 早安 区间槽位 解释示例：区间槽位 匹配：早安北京 匹配：早安乌鲁木齐 不匹配：早安 如果想匹配一个确定的区间，比如 2 到 4 个字符之间，区间槽位绝对可以满足需要。语法为： *(最短-最长) ，此槽位可以被系统捕获和用在回复中。 + 早安 *(2-4) - 早安 必选项 解释示例：必选项 匹配：早安北京 不匹配：早安西安 不匹配：早安 必选项用在你有一系列可选项，但是必须有一个被匹配。输入中的可选项会被系统捕获和用在回复中 + 早安(北京|上海|天津) - 早安 可选项 解释示例：可选项 匹配：早安北京 匹配：早安美丽的北京 不匹配：早安热闹的北京 可选项用来确定一些额外的内容 + 早安 [美丽的] 北京 - 早安 回复 在触发器中，我们已经学到了怎么添加一个回答。事实上你可以添加任意数量的回答。这里还有一些高级功能可以帮助你完成更多的任务。 简单形式 + 在吗 - 你好，在的 如果添加了多个回答，系统会从中随机挑选一个作为回复, 然后丢掉这个回答。 + 在吗 - 亲，在的 - 亲，有什么需要帮助 - 你好，请问遇到什么问题了吗？ 所谓丢掉这个答案，是指机器人针对同一个用户，在半个小时内再次匹配上该触发器时，选择回复时，不考虑使用过的回复。 在一个 触发器 中声明多个回复后，保存， 逻辑 中将出现分支。 机器人对话逻辑 如果不想让系统丢掉使用过的回复，可以在回复前添加{keep}。 + 在吗 - {keep} 亲，在的 - 亲，有什么需要帮助 - 你好，请问遇到什么问题了吗？ 也可以在触发器前添加*{keep}*，就不用在每个回答中都添加了 + {keep} 在吗 - 亲，在的 - 亲，有什么需要帮助 - 你好，请问遇到什么问题了吗？ 如果回答很长，可以通过“^”分割以方便可读性。可以通过“\\n”实现换行 + 在吗 - 你好，这里是客服中心，\\n ^ 请问遇到什么问题了吗？ 它等价于 + 在吗 - 你好，这里是客服中心，请问遇到什么问题了吗？ 槽位取值 解释示例：槽位取值 匹配：小明比小红高 回答：你确定小明比小红高吗？ 有些时候，在回答中需要使用输入中的槽位值，这时可以使用<cap>达到目的。 + 我是 *~3 - 你好，<cap> 如果用户输入，“我是张三”，那么系统将回复“你好，张三”，当有多个槽时，可以使用多个<cap>。 + *2 比 *2 高 - 你确定<cap1>比<cap2>高吗？ 在对话中，我们有时候会需要以前的槽位值，看一下下面这个例子： + 我叫 *~3 - 你好，<cap1> + 你猜我叫什么？ % 你好，<cap1> - 你刚说了，你叫<p1cap1> <pNcapM>代表了以前的槽位。其中 N 代表在在对话中之前的问答， M 代表捕获的位移。 槽位取值 此处，还有一个重要语法： % 。(%) 开头的句子代表触发器“你猜我叫什么？”只服务于“你好，<cap1>”作为回复时，它会被优先匹配。上一轮对话的回复通过(%)的方式指定了接下来的逻辑，形成多轮对话。 关于(%)的用法，后文还会进行详细介绍，此处，读者只需要掌握从上下文的槽位取值便可。 另外，(+, %, -) 前的空格不是必须的，在多轮对话中，空格可以增强脚本的可读性，但是系统是忽略的。 重定向 {@__reply__} 有些时候，在问答对中重用一些回复能使编写脚本效率更高，这时可以定义一个问答对，并在脚本其它位置引用它。 + 在吗 - {@__greeting__} 请问有什么能帮助您？ + __greeting__ - 亲，在的。 - 你好，客服小美为您服务 - 亲亲，稍等，客服马上就到 引用的方式就是 “{@触发器}”，触发器中的下划线不是必须的，但是它能增强脚本的可读性。 多轮对话 在实际应用中，和机器人聊天时，很可能要通过多轮对话完成一个任务。我们用(%)来定位之前回复，声明新的触发器，(%)后的内容是和某个回复内容一样的字符串。 + * - 您身高多少 + *(3-5) % 您身高多少 - 我的身高也是<cap> 让我们一起看看这个例子： 当用户输入任何文字，我们用通用槽位触发回答,然后系统回复“您身高多少”。 当用户继续输入时，系统会先从历史中查看之前的回复中是否有对应的上下文，在这里指的是“% 您身高多少” 最后，如果用户输入 3 到 5 个字符，系统匹配触发器“+ *(3-5)”, 并且回复“我也是<cap>”。“<cap>”代表的就是用户输入的内容。 函数 函数是一个强大而有趣的设计。在回复中，可以使用函数来获取整条消息对象，用户对象或者其它资源，比如数据库。把槽位值当做变量传给函数，例如下面这个例子： + 我的用户名是 *(2-10) - ^getUserAccount(<cap>) 所以，调用函数的方式就是使用“^”。在函数的编辑窗口中，可以这样定义： exports.getUserAccount(account, cb) { cb(null, \"对不起，系统没有找到\" + account); } 函数的声明中，参数列表首先是槽位的值，可以传多个，然后最后一个参数始终是回调函数(cb)，cb 的参数列表为(error, text)。text 作为文本添加到回复中。 复合函数 在回复中，可以添加任意多的函数，比如 + ... - 联合 ^callFunction1() 和 ^callFunction2(<cap1>) 嵌套函数 在函数的回调函数中，函数名会被解析成对应的函数，所以放心的在回复中添加任意合法的函数，比如在脚本中这样写： + ... - ^nestedAFunction() 然后，在函数中，定义如下： exports.nestedAFunction = function(cb) { cb(null, \"张三 ^nestedBFunction()\"); } exports.nestedBFunction = function(cb) { cb(null, \"和李四\"); } 总结 以上是多轮对话设计器 v1.x 版本中支持的脚本语法，这些语法能够保证业务人员实现满足需求的聊天机器人，除了函数部分的有一点门槛外，其它内容是非常容易掌握的。对于函数，只需要一点 JavaScript 基础知识，就可以掌握。 示例应用 本节介绍使用多轮对话设计器实现一个“聊天机器人”的具体过程。我们以实现天气问答机器人为例，我们选择这个场景并不是因为它简单，而是因为它容易理解，使用多轮对话设计器可以实现更复杂，更有价值的应用。我们先一睹为快，这个机器人是什么样子的。 视频：天气查询机器人Demo 是不是很实用？如果你掌握了多轮对话设计器，就可以实现聊天机器人。 需求分析 首先，我们需要梳理一下需求： 我想知道任意城市的天气信息，比如“今天上海天气怎么样”； 我还比较关心空气，我可以通过“今天上海空气怎么样”获得空气质量信息； 我想知道今天适不适合户外运动，就问“今天上海适合运动么”； 如果我问了一个城市的天气状况，我还想继续询问这个城市更多信息，这样我不用每次都告诉机器人城市名称。 当然，我的每个意图都有多种表述方式，机器人能支持一些变化的问法。如果我的问题不够严谨，机器人还应该提醒我合理的表达。 调研提供天气信息查询的 API 现在很多服务以 API 的形式提供，从搜索引擎中查找“天气查询服务 API”，我们就能得到一些供应商，经过一些比较，我选择了和风天气，它数据丰富，免费额度大方。 和风天气 AI 音箱 Chatopera 与杭州任你说科技达成战略合作伙伴关系，所以，我们的对话系统产品与任你说音箱可以直接集成。 任你说官网 第一条规则 第一次打开多轮对话设计器后，我们看到如下的面板，我们称之为主面板。 和风天气 点击新建按钮，弹出创建机器人的表单： 创建聊天机器人 填入“小叮当”，当前多轮对话设计器支持中文(zh_CN)和英文(en_US)，我们选择“zh_CN”，点击“确认”。然后我们就得到了一个聊天机器人。 聊天机器人 在操作中，有几个按钮： 管理：管理聊天机器人的多轮对话。 版本管理：管理不同版本的机器人，导出机器人和在不同版本之间进行比对。 环境变量：机器人函数中依赖的全局变量，这些变量在“设计对话”的阶段和在 IT 人员“部署到生产环境”下的值是不同的，比如一些接口服务的认证键值对。 发布：发布当前机器人为最新版本。 删除：将机器人删除。 点击“管理”，进入多轮对话管理页面，点击“新建对话”，在弹出的窗口中，填写“对话名称”为“weather”，点击“确认”。这时，我们看到了新建的对话，我们将修改它的内容完成天气对话服务。 创建对话 点击“编辑”，进入 对话编辑窗口 。在左侧的“脚本区域”，写下第一条规则。 + 今天 (*) 天气 [怎么样] - {keep} <cap1>天气挺好的 点击“保存”，这时右侧的“逻辑区域”有了变化，出现了一个线条，在线条左右两端分别是问题和答案。在“对话区域”，我们输入“今天北京天气怎么样”，点击发送，这时机器人回复了。 对话编辑窗口 从我们需求上看，这没什么用，但是它工作了，我们就一点点优化它。对于在这条规则中，我们使用的语法，(*)代表一个槽位， 代表在回复中取槽位的值，[怎么样]是可有的字符串，{keep}代表这条规则始终生效，keep 涉及到对话的状态管理，我们将在文档中提供更多规则的描述，现在，读者看懂本示例就可以了。 添加函数 在多轮对话设计器中，怎么请求和风天气的数据呢？使用函数。函数是多轮对话支持的使用 JavaScript 实现的程序。 我们在“对话编辑窗口”点击函数，粘贴如下代码： var WForewast = function (apiKey) { if (!apiKey) throw new Error('Invalid token, get it from http://www.heweather.com/my/service'); this.key = apiKey; } WForewast.prototype.getWeatherByCity = function (city) { return new Promise((resolve, reject)=>{ let url = \"https://free-api.heweather.com/v5/weather?city=\" + encodeURIComponent(city) + \"&key=\" + this.key http .get(url) .then((res)=>{ resolve(res.data.HeWeather5[0].suggestion); }) .catch(function (err) { if (err) return reject(err); }); }) } const wf = new WForewast('182f1b6826d94c6285a489d2414f3ad0'); exports.getWeatherByCity = function(city, cb){ debug(\"getWeatherByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"comf\"][\"txt\"] }) }, (err)=>{ debug(\"error:%j\", err) cb(null, { text: `很抱歉，没有获得${city}的天气信息。` }) }) } exports.getAirByCity = function(city, cb){ debug(\"getAirByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"air\"][\"txt\"] }) }, (err)=>{ cb(null, { text: `很抱歉，没有获得${city}的空气信息。` }) }) } exports.getSportByCity = function(city, cb){ debug(\"getSportByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"sport\"][\"txt\"] }) }, (err)=>{ cb(null, { text: `很抱歉，没有获得${city}的信息。` }) }) } exports.getDresscodeByCity = function(city, cb){ debug(\"getDresscodeByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"drsg\"][\"txt\"] }) }, (err)=>{ cb(null, { text: `很抱歉，没有获得${city}的信息。` }) }) } 在函数中，我们实现了根据城市请求天气、空气质量、着装建议和运动建议的接口，分别是 getWeatherByCity ， getAirByCity ， getDresscodeByCity 和 getSportByCity 。 细心的读者会发现，在函数中，多轮对话设计器直接支持了 http，debug 作为工具类，发起网络请求和输出日志信息。这两个接口极大的扩展了函数的能力，我们也会在函数中详细描述它们的使用。 然后，回到“脚本区域”，修改一下规则，更新如下： + 今天 (*) 天气 [怎么样] - {keep} ^getWeatherByCity(<cap1>) 在回复中，我们调用了 getWeatherByCity ，并且传入了城市名称。 接着，在“对话区域”，输入“今天北京天气怎么样”，回复与上次不一样了。 测试对话 这次，我们看到了期望的回复，正是从和风天气返回的北京今天的天气状况。 使用环境变量 在上面的函数中，我们有一个敏感的信息：和风天气的 API 密钥。在实际应用中，我们希望设 计阶段 和 部署阶段 ，它的值是不同的。这时，就需要使用 环境变量 ，环境变量正是为解决这个问题而设计的。 回到主面板，在“小叮当”操作中，点击环境变量，创建如下键值对： 设置环境变量 读者可以从和风天气获得该密钥，为验证用途，可以粘贴下面的值： \"HEWEATHER_URL\": \"https://free-api.heweather.com/v5\", \"HEWEATHER_KEY\": \"182f1b6826d94c6285a489d2414f3ad0\" 保存后，回到天气对话脚本的“对话编辑窗口”，在函数中，使用下面的脚本： var WForewast = function (apiKey) { if (!apiKey) throw new Error('Invalid token, get it from http://www.heweather.com/my/service'); this.key = apiKey; } WForewast.prototype.getWeatherByCity = function (city) { return new Promise((resolve, reject)=>{ let url = config[\"HEWEATHER_URL\"] + \"/weather?city=\" + encodeURIComponent(city) + \"&key=\" + this.key http .get(url) .then((res)=>{ resolve(res.data.HeWeather5[0].suggestion); }) .catch(function (err) { if (err) return reject(err); }); }) } const wf = new WForewast(config[\"HEWEATHER_KEY\"]); exports.getWeatherByCity = function(city, cb){ debug(\"getWeatherByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"comf\"][\"txt\"] }) }, (err)=>{ debug(\"error:%j\", err) cb(null, { text: `很抱歉，没有获得${city}的天气信息。` }) }) } exports.getAirByCity = function(city, cb){ debug(\"getAirByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"air\"][\"txt\"] }) }, (err)=>{ cb(null, { text: `很抱歉，没有获得${city}的空气信息。` }) }) } exports.getSportByCity = function(city, cb){ debug(\"getSportByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"sport\"][\"txt\"] }) }, (err)=>{ cb(null, { text: `很抱歉，没有获得${city}的信息。` }) }) } exports.getDresscodeByCity = function(city, cb){ debug(\"getDresscodeByCity: %s\", city); wf.getWeatherByCity(city) .then((suggestions)=>{ cb(null, { text: suggestions[\"drsg\"][\"txt\"] }) }, (err)=>{ cb(null, { text: `很抱歉，没有获得${city}的信息。` }) }) } 这次，代码内容和前一版本相比，使用了 config 对象， config 是一个包含环境变量的 JSON 数据。所以，我们更加利于将来部署对话应用了。 支持更多对话 回想我们需要的几种天气信息，我们根据需求变更脚本，一个满足需求的脚本呈现如下： // 技能介绍 + 你知道哪些天气信息 - 我知道今天的空气，着装建议和适不适合运动 // 天气 + 今天 (*) 天气 [怎么样] - {keep} ^getWeatherByCity(<cap1>) + [今天] (天气|气候) [怎么样] - {@__wf_guide_} + (*) 今天天气 [怎么样] - {keep} ^getWeatherByCity(<cap1>) + (*) 空气 (*) % ^getWeatherByCity(<cap1>) - {keep} ^getAirByCity(<p1cap1>) + __wf_guide_ - {keep} 添加城市名哦，比如“今天北京天气怎么样”或者“北京天气怎么样” - 我需要知道城市名称，比如“今天北京天气怎么样”或者“北京天气怎么样” - 要告诉我城市名，比如“今天北京天气怎么样”或者“北京天气怎么样” // 空气 + [今天] 空气 [怎么样] - {@__wf_guide_air} + (*) 今天空气 [怎么样] - {keep} ^getAirByCity(<cap1>) + 今天 (*) 空气 [怎么样] - {keep} ^getAirByCity(<cap1>) + __wf_guide_air - {keep} 添加城市名哦，比如“今天北京空气怎么样”或者“北京空气怎么样” - 我需要知道城市名称，比如“今天北京空气怎么样”或者“北京空气怎么样” - 要告诉我城市名，比如“今天北京空气怎么样”或者“北京空气怎么样” // 运动 + [今天] 适(合|宜)运动(么|吗) - {@__wf_guide_sport} + (*) 今天适(合|宜)运动(么|吗) - {keep} ^getSportByCity(<cap1>) + 今天 (*) 适(合|宜)运动(么|吗) - {keep} ^getSportByCity(<cap1>) + __wf_guide_sport - {keep} 添加城市名哦，比如“今天北京适合运动么”或者“北京今天适合运动么” - 我需要知道城市名称，比如“今天北京适合运动么”或者“北京今天适合运动么” - 要告诉我城市名，比如“今天北京适合运动么”或者“北京今天适合运动么” // 衣着 + [今天] 适(合|宜)穿什么 - {@__wf_guide_dresscode} + (*) 今天适(合|宜)穿什么 - {keep} ^getDresscodeByCity(<cap1>) + [今天] (*) 适(合|宜)穿什么 - {keep} ^getDresscodeByCity(<cap1>) + __wf_guide_dresscode - {keep} 添加城市名哦，比如“今天北京适合穿什么”或者“北京今天适合穿什么” - 我需要知道城市名称，比如“今天北京适合穿什么”或者“北京今天适合穿什么” - 要告诉我城市名，比如“今天北京适合穿什么”或者“北京今天适合穿什么” 这也就是我们在天气查询机器人 Demo 中看到的机器人的脚本，在设计过程中，我们通过对话区域来测试机器人的回复是否符合预期，我们通过逻辑窗口来查看当前机器人的思维逻辑导图，当前机器人对话的状态会被高量，被命中的规则呈现为路径。 机器人思维逻辑 另外，在设计过程中，每次保存自动为脚本和函数生成快照，使用快照下拉列表，我们能方便的回退。 快照管理 在 多轮对话设计器 中，业务人员可以更专注于对话机器人的对话逻辑满足需求。 发布机器人 现在，有了可以工作的脚本，我们想发布一个版本，这时回到主面板，点击“发布”，填入如下信息，点击“确认”。 发布机器人 导出机器人 最终，我们需要得到一个“服务”，它能时刻被访问，以及和 AI 音箱集成。我们需要将天气机器人导出为对话应用，然后部署到 智能问答引擎 。在主面板，点击 版本管理 ，我们看到操作中有三项。 对比差异:在多个版本中比较差异，包括脚本和函数。 导出：将机器人导出为对话应用文件。 覆盖：使用这个版本覆盖当前机器人，包括脚本和函数等。 多轮对话设计器支持导出机器人后，极大的方便了分发和部署。 评论"
  },
  "products/chatbot-platform/audit.html": {
    "href": "products/chatbot-platform/audit.html",
    "title": "统计 | Chatopera文档中心",
    "keywords": "统计 在机器人的首页，可以看到机器人被访问的情况，统计分为三种：知识库检索，多轮对话检索和知识库点击事件。 评论"
  },
  "products/chatbot-platform/index.html": {
    "href": "products/chatbot-platform/index.html",
    "title": "Chatopera 云服务 | Chatopera文档中心",
    "keywords": "Chatopera 云服务 https://bot.chatopera.com 服务概述 聊天机器人即服务，面向互联网用户开放，聊天机器人开发者/开发商可以快速实现企业级的聊天机器人服务，以保护用户隐私为前提，以提供专业的服务来赢得青睐，采用按量计费的方式获利。 可靠性保证 Chatopera 云服务是企业级的服务，依托于 Chatopera 的 PaaS 服务上，使用监控、负载均衡、集群等功能保证服务的高可靠性。 私有部署 对于企业客户，Chatopera 可提供 Chatopera 云服务的私有部署支持。 服务类型 联系方式 商务洽谈 (+86)136-9149-0568 售后技术支持 (QQ)1736468269 咨询、云服务发票等 info@chatopera.com 评论"
  },
  "products/chatbot-platform/billing.html": {
    "href": "products/chatbot-platform/billing.html",
    "title": "计费 | Chatopera文档中心",
    "keywords": "计费 计费类型 当前 Chatopera 云服务支持 按天计费 和 按年付费 两种形式。 类型 适用对象 业务量 按天计费 小型企业，初创公司 在线客服量每天不超过 50 人次，咨询量小 按年计费 成长型企业，中大型公司 在线客服量每天超过 100 人次或更多，咨询量大 按天计费 每日单个用户可以免费请求机器人对话 1000 次，单日>=1000 次的部分按照每条 1 分钱计算，多出的部分按量收费，按日结算，每天生成账单。 按年计费 包年，目前支持两种套餐。 套餐（条/年） 费用 相对于按天计费的优惠 100W/年 0.6W 元 350 元 500W/年 4W 元 6350 元 套餐 是记录总量，包含 原免费额度 超过 套餐 额度仍按照 1 分每条 套餐 按年度计算，没有用完的额度过期作废 可以从现有 套餐 升级到高级版本，但是不能从现有 套餐 降级 相对于按天计费的优惠 是相对于 按天计费 的情况，前 1000 条免费，超过后每条 1 分钱，购买套餐能省的钱 开启 按年计费 和购买套餐，请联系 info@chatopera.com。 充值 Chatopera 云服务支持微信支付和企业银行账号汇款，在控制台右上角的导航栏进入“费用中心”进行相关操作。 发票 发票服务，在控制台右上角的导航栏进入“费用中心”进行申请，同时可发送邮件到 info@chatopera.com 中跟进发票开具状态。 私有部署 Chatopera 云服务是 Chatopera 机器人平台以“软件即服务(SaaS)”的方式提供给客户，同时企业可以获得 Chatopera 机器人平台以安装到企业的私有设备上，商定购买私有部署的版本， 联系我们 ，私有部署版本只收取软件的商业授权证书费用，不按 API 请求量计费。 评论"
  },
  "index.html": {
    "href": "index.html",
    "title": "Chatopera 文档中心 | Chatopera文档中心",
    "keywords": "Chatopera 文档中心 Chatopera 提供企业实现聊天机器人应用的解决方案，随着移动互联网的普及和人工智能技术的不断进步，企业服务向着更智能化、更自动化的方向发展。Chatopera 利用自身在自然语言处理、机器学习、搜索引擎和业务流程引擎上的积累，为企业提供快速、低成本、稳定的落地聊天机器人服务的产品。 产品目录 本文档包含对 Chatopera 产品的详细使用介绍： Chatopera 云服务 ：聊天机器人即服务，面向聊天机器人开发者/开发商提供的立即获取的平台级服务，尤其是对中小型企业非常友好。 春松客服 ：针对目前智能客服的需求，我们为没有客服应答系统的客户提供全渠道智能客服系统。全渠道智能客服系统是客服应答系统和智能问答引擎的集成。 小助手 ：Chatopera 小助手（简称“小助手”）是面向企业的客户服务人员发布的一款从知识库检索建议回复的桌面软件。 语言方面，Chatopera 的产品支持 汉语 和 英语 的企业聊天机器人开发。 技术支持 联系我们，获得支持： Chatopera微信公众号 常用链接 官网 博客 价值观及愿景"
  },
  "products/cskefu/work.html": {
    "href": "products/cskefu/work.html",
    "title": "客服工作台 | Chatopera文档中心",
    "keywords": "客服工作台 客服工作状态 客服人员和消费者建立连接，并完成对话的聊天室，是客服系统的核心之一。除了建立连接的速度，消费者的用户体验也是在聊天的过程中体现的，当服务场景需要智能化和自动化时，也是围绕聊天室进行的。因为不同客户的业务需求不同，聊天室针对业务需求有不同的设计，下图表示常见的状态： 聊天室的状态 排队 ：人工坐席繁忙，消费者接入聊天室时没有空闲的客服人员接起会话，这时，消费者往往会等待，在等待的过程中输入问题。此时消费者不能断开，断开后重连有可能重新排队。 活动 ：人工坐席加入会话，开始和消费者聊天，解答问题，并且有可能进行几句寒暄。 转接 ：当前服务人员有时会需要其他工作人员协助，往往也会直接将消费者转接到另外一名客服人员。这时，聊天室就被另外一名客服人员接管。 关闭 ：聊天结束后的一种状态，代表服务未顺利完成，很可能对消费者问题没有解决或消费者离开聊天室。 完成 ：聊天结束后的一种状态，代表服务顺利完成，比如消费者得到了满意的回答，关闭聊天室。 客服坐席设置 确保需要作为坐席的用户具有“多媒体坐席”的权限；系统->系统管理->用户和组->用户账号->选中该用户->编辑，就可以设置“多媒体坐席 需要把 “坐席工作台” 授权给此用户； 保证该坐席用户已经登录系统，并且将自己的坐席状态设置为”就绪”。 评论"
  },
  "products/cskefu/permission.html": {
    "href": "products/cskefu/permission.html",
    "title": "权限管理 | Chatopera文档中心",
    "keywords": "权限管理 根据角色和部门进行权限检查： 管理员可以管理所有资源 管理员可以创建部门/角色/人员，人员可设置为是否是“管理员”。 每个人最多在一个部门中 组织机构支持层级的树状结构 角色包含对不同资源的读写权限 资源如联系人，客户等是根据部门进行隔离的 资源如系统配置，组织机构管理等是不隔离的 假设组织机构如下： 联系人 联系人是被隔离的资源。 李四所能看到的联系人全集是 A 部门及其附属部门所创建的全部联系人；但是李四究竟能不能看到则取决于他被赋与的角色有没有看到联系人的权限 联系人的权限包括：我的联系人，全部联系人，今日新增，本周新增，等. 假如李四被赋予“全部联系人”权限，那么他能看到A部门及其附属部门所创建联系人。 李四看不到 B 部门的联系人，张三看不到 A 部门的联系人。 李四能看到刘一创建的联系人，刘一看不到李四创建的联系人。 系统设置 系统设置是不被隔离的资源。 如果李四和张三都被赋予了\"系统管理\"的权限，二者看到的系统管理面板是一致的。 评论"
  },
  "products/cskefu/opensource.html": {
    "href": "products/cskefu/opensource.html",
    "title": "开源项目 | Chatopera文档中心",
    "keywords": "开源项目 春松客服是一个开源的项目，项目地址： https://github.com/chatopera/cosin 在上面的地址，您可以 下载项目开源码 通过 README.md 了解更多项目信息 通过 Wiki 获得开发文档 通过 Issue 提问 通过 Pullrequest 贡献代码 通过 Issue 了解开发状态 Chatopera拥抱开源 评论"
  },
  "products/cskefu/deploy.html": {
    "href": "products/cskefu/deploy.html",
    "title": "应用部署 | Chatopera文档中心",
    "keywords": "应用部署 安装方式： 单服务器部署：个人/开发者，体验服务 公有云部署：青云 AppCenter，支持秒级计费、动态伸缩、备份恢复、高可用性、监控告警。 私有部署：部署到企业 IT 基础设施。 以上安装方式在文档的其余部分作详细介绍。 单服务器部署 满足个人和开发者快速部署，体验产品。 单服务器部署 公有云部署 青云 AppCenter 是一个云计算环境中的应用交付与运营管理平台，同时包含一整套用来开发云应用及云化已有应用的框架。让应用提供商和开发者可以从资源层管理的复杂性中脱离出来，从而更高效地开发、部署、运维及管理所提供的应用，让用户可以便捷地选择需要的应用来构建和管理自身的业务。 春松客服的公有云部署默认采用青云 AppCenter 并充分发挥 PaaS 平台的强大计算能力，提供支持海量用户并发访问的春松客服实例，具体详细阅读 春松客服上架青云 AppCenter ， 获得详细介绍，包括服务部署、管理等。 企业私有部署 部署到企业内部 IT 基础设施，获取服务镜像 春松客服的拓扑结构介绍： 组件 描述 镜像 开源码 ------------------------------------------------------------------------ contact-center 客服系统 DockerHub Github cc-switch 电话渠道软交换，基于 FreeSWITCH DockerHub Github mysql 数据库 DockerHub x redis 数据库 DockerHub x elasticsearch 检索服务 DockerHub Github 依赖环境 智能问答引擎是使用 docker 镜像进行分发的，所以，只要是 docker v12+ 版本支持的操作系统都可以运行智能问答引擎服务，对于更详细的操作系统的兼容列表，请参考 Docker Community Edition (CE) 。 硬件方面，Chatopera 推荐使用 4Core CPU(Intel E5 or better)， 16GB Memory，128GB Disk 运行服务。 智能问答引擎的 docker 镜像可以安装在 docker 服务中，或 docker registry 中。然后通过容器管理框架，比如 kubernetes 、 Apache Mesos 或 docker compose 。 在本文档中，介绍使用 docker compose 的方式部署和管理服务，docker compose 是轻量级的 docker 服务编排方案。 docker 版本 Docker version 18.03.1-ce, build 9ee9f40 安装文档 ，注意：docker 为开源码程序，本文档使用 社区版本（Docker CE） 。 docker-compose docker-compose version 1.21.1, build 5a3f1a3 安装文档 。 安装 假设 docker 已经被安装好，并且其进程已经启动，在命令行终端，执行下面命令： git clone https://github.com/chatopera/cosin.git cd cosin ./scripts/start.sh 上述命令执行后，查看各个服务是否已经启动成功。 docker-compose ps 智能客服系统的登录地址是： http://服务器IP地址:8035 默认管理员用户名： admin， 密码：admin1234 生产环境安装建议： 事项 内容 部署方式 服务端软件使用 Docker 容器分发，支持公有云环境/本地服务器部署 网络带宽配置要求 本地内部办公网 100 兆交换，服务器之间千兆交换 操作系统、相关软件要求 最小化部署：Ubuntu 16.04 或者其他服务器系统 , 资源要求为：8 核 CPU，16G 内存 终端配置要求 座席电脑的配置 8G 内存，500G 硬盘，I5 CPU，支持 windows 7 或者 windows10 服务方案 提供系统版本升级建议，优化建议等技术支持服务 停止服务 完成磁盘路径的创建后，就可以启动服务了。 在命令行终端中， cd cosin docker-compose down 重启服务 在命令行终端中， cd cosin docker-compose restart 评论"
  },
  "products/cskefu/crm.html": {
    "href": "products/cskefu/crm.html",
    "title": "客户关系管理 | Chatopera文档中心",
    "keywords": "客户关系管理 新建客户 左侧菜单 -> 全部客户 -> 新建客户 这里客户信息包括“基本信息”，“企业信息”，“联系人信息”； 其中“联系人信息”，会同步到 左侧菜单->全部联系人； 编辑客户 左侧菜单 -> 全部客户 -> 客户列表 -> 选中一个客户 -> 点击“编辑”按钮 只能更新“基本信息”，“企业信息”； 需要更新 “联系人信息”，请移步到 左侧菜单->全部联系人； 联系人笔记 进入联系人列表，选择一个联系人，点击 联系人 姓名，进入详情页面。 在详情页面，编辑联系人笔记，记录来往历史。 删除客 左侧菜单 -> 全部客户 -> 客户列表 -> 选中一个客户 -> 点击“删除”按钮 评论"
  },
  "products/chatbot-platform/support.html": {
    "href": "products/chatbot-platform/support.html",
    "title": "技术支持 | Chatopera文档中心",
    "keywords": "技术支持 在使用过程中，遇到问题，欢迎联系： 邮箱 info@chatopera.com Chatopera 云服务 QQ 交流群：809987971 获得技术支持。 评论"
  },
  "products/chatbot-platform/integration.html": {
    "href": "products/chatbot-platform/integration.html",
    "title": "系统集成 | Chatopera文档中心",
    "keywords": "系统集成 企业或开发者可以选择两种集成 Chatopera 云服务的方式：SDK 以及 RestAPI。 SDK 是 Chatopera 团队将 RestAPI 封装好的面向不同编程语言的库，包括 Node.js、Go、PHP 和 Java 等。 SDK 简化了集成的复杂度，甚至可以通过不同语言的包管理工具直接安装。 RestAPI 接口是面向未发布 SDK 的语言进行集成时候的选择，推荐您优先选择 SDK，下面分别介绍两种方案。 SDK Chatopera 云服务提供集成聊天机器人的方案为 SDK，目前支持 Java、Node.js、PHP 和 Golang，近期也会补充更多语言的 SDK。 在聊天机器人的一级菜单，可以进入 集成 页面。 集成 对于不同语言而言，其安装配置方式有别，但是用代码取得一个聊天机器人实例的方式大同小异，参数是一致的，请求结果也全部采用 JSON 数据格式。 各 SDK 的配置文档、接口文档和示例程序可以在 集成 页面得到。以下内容是对不同接口返回接口的解释。 获得机器人详情 chatbot.details { \"name\": \"test1\", \"fallback\": \"我不明白您的意思。\", \"description\": \"ss\", \"welcome\": \"你好！我是机器人客服。\", \"primaryLanguage\": \"zh_CN\" } name : 机器人名字 fallback : 兜底回复 description : 机器人描述 welcome : 机器人问候语 primaryLanguage : 机器人语言 检索多轮对话 chatbot.conversation { \"state\": \"default\", \"createdAt\": 1541677323194, \"string\": \"欢迎惠顾！\", \"topicName\": \"greetings\", \"subReplies\": [], \"service\": { \"provider\": \"conversation\" }, \"logic_is_fallback\": false, \"botName\": \"test1\" } state : 业务字段，可以在多轮对话脚本中设置 string : 机器人回复的文本内容 topicName : 机器人会话主题 logic_is_fallback : 是否是兜底回复 botName : 机器人的名字 service 代表返回的数据来源， provider:script 指 多轮对话 ， provider:faq 指 知识库 ；不同数据来源也会提供相应信息。 provider key 解释 faq docId 文档 ID post 标准问 score 分数 threshold 阀值 conversation 多轮对话 fallback 兜底回复 mute 该用户被该机器人屏蔽 回复处理逻辑 多轮对话获取回复的逻辑解释如下： 查询逻辑 用户输入，以文本的形式输入，语音输入也需要转化成文字。 [知识库检索] 如果知识库检索出相似度大于 0.8 的问答对，直接返回得分最高的问题的答案。 [多轮对话检索] 如果知识库没有检索出相似度大于 0.8 的问答对，检索多轮对话，如果命中了一个规则，直接返回答案。 [兜底回复] 如果多轮对话也没有检索出答案，返回兜底回复。 检索知识库 chatbot.faq [ { \"id\": \"AWbyu9DYjTtqn-PFv1GV\", \"score\": 1, \"post\": \"停效期间的保单是否能办理减保？\", \"reply\": \"停效期间的保单可以办理减\" }, { \"id\": \"AWbyu86_jTtqn-PFv1GR\", \"score\": 0.3333333333333333, \"post\": \"主险期缴期间，附加险能不能办理减额缴清？\", \"reply\": \"根据目前的业务规定：附加险缴费方式应与主险一致\" } ] id : 问答对 Id score : 置信度 post : 标准问 reply : 答案 获得用户列表 chatbot.users [ { \"userId\": \"nodesdk\", \"lasttime\": \"2018-11-08T11:45:44.268Z\", \"created\": \"2018-11-08T11:42:02.104Z\" }, { \"userId\": \"superadmin\", \"lasttime\": \"2018-11-08T11:33:23.163Z\", \"created\": \"2018-11-08T11:33:23.167Z\" }, { \"userId\": \"c100680c10dc534dac3e28a024e59207\", \"lasttime\": \"2018-11-08T08:58:48.575Z\", \"created\": \"2018-11-08T08:57:16.915Z\" } ] userId : 和机器人对话的用户标识 lasttime : 最后沟通时间 created : 第一次沟通时间 屏蔽用户 chatbot.mute 正常返回时，statusCode 200, body 为 {} 。 取消屏蔽 chatbot.unmute 正常返回时，statusCode 200, body 为 {} 。 是否被屏蔽 chatbot.ismute 返回 Boolean 类型值。 true 获取聊天历史 chatbot.chats { \"total\": 4, \"current_page\": 1, \"total_page\": 1, \"data\": [ { \"userId\": \"nodesdk\", \"textMessage\": \"xx\", \"direction\": \"outbound\", \"service\": \"faq\", \"confidence\": 1, \"created\": \"2018-11-08T11:45:44.448Z\" }, { \"userId\": \"nodesdk\", \"textMessage\": \"xxx\", \"direction\": \"inbound\", \"service\": \"faq\", \"created\": \"2018-11-08T11:45:44.276Z\" }, { \"userId\": \"nodesdk\", \"textMessage\": \"xx\", \"direction\": \"outbound\", \"service\": \"conversation\", \"confidence\": 1, \"created\": \"2018-11-08T11:42:03.234Z\" }, { \"userId\": \"nodesdk\", \"textMessage\": \"你好\", \"direction\": \"inbound\", \"service\": \"conversation\", \"created\": \"2018-11-08T11:42:02.110Z\" } ] } total : 该用户和机器人之间对话总数 current_page ： 当前页 total_page : 总页数 userId : 用户标识 textMessage : 文本内容 direction : 消息传递方向，【inbound】为消费者发送，【outbound】为机器人发送 service : 提供回复的服务 confidence : 置信度 created : 消息创建时间 RestAPI Chatopera云服务与其他服务集成的方式是暴露出来的Rest API接口，接口可以分为以下几类： 资源 描述 路径前缀 聊天机器人 对象的增删改查 /api/v1/chatbot 多轮对话 查询，导入和状态管理 /api/v1/chatbot/:clientId/conversation 多轮对话 问答的使用情况统计数据 /api/v1/chatbot/:clientId/conversation/query/counts 知识库FAQ问答对 增删改查和状态管理 /api/v1/chatbot/:clientId/faq/database 知识库近义词 增删改查 /api/v1/chatbot/:clientId/faq/synonyms 知识库 问答的使用情况统计数据 /api/v1/chatbot/:clientId/faq/query/counts 历史管理 查询对话历史，用户列表 /api/v1/chatbot/:clientId/users 基本规范 在Rest API接口中，请求包括协议(http/https)，IP地址(Host)，PORT端口，HTTP头字段(Headers)，HTTP报文主体(Body 可选 )。 请求(Request) 在智能问答引擎服务启动后，通过 http 协议处理请求，如无特殊说明，每个接口都有如下设置： Host: {{IP}} PORT: {{PORT}} Headers: Content-Type application/json 注意 ： {{变量}} 代表变量； {{IP}} 代表Chatopera云服务的提供地址，默认使用 https://bot.chatopera.com 。 {{PORT}} 代表Chatopera云服务的提供的端口，HTTP协议默认使用80，HTTPS协议默认使用443。 响应(Response) 如无特殊说明，返回值都是 JSON 数据格式，在 正常返回 下，格式符合如下形式： { \"rc\": 0, \"data\": ... } 其中， rc 代表请求是否被满足， 0 代表满足； rc 非 0 时，代表有异常，不同的异常类型使用不同的数字，在每个API中介绍。 异常返回的一般形式： { \"rc\": 非0的正整数, \"error\": ..., \"msg\": ... } 创建聊天机器人 POST /api/v1/chatbot/:clientId cURL：创建聊天机器人 curl --request POST \\ --url 'http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}' \\ --header 'Content-Type: application/json' \\ --data '{ \"name\": \"小叮当\", \"primaryLanguage\": \"zh_CN\" }' 创建聊天机器人 BODY { \"name\": \"小叮当\", \"primaryLanguage\": \"zh_CN\" } 字段 必须 类型 描述 chatbotID 是 string 机器人的唯一ID，是以字母开始的由[a-zA-Z0-9_]组成的字符串。 name 是 string 机器人的名称。 primaryLanguage 是 string 机器人的语言，现在支持两个选项：[\"zh_CN\", \"en_US\"]，分别代表中文和英文。 description 否 string 机器人的描述 成功返回 { \"rc\": 0, \"data\": { \"chatbotID\": \"{{clientId}}\", \"name\": \"小叮当\", \"fallback\": \"我不明白您的意思。\", \"description\": \"智能问答和对话任务\", \"welcome\": \"你好！我是机器人客服。\", \"primaryLanguage\": \"zh_CN\" } } 返回字段说明： fallback ：聊天机器人的兜底回复。 description ：聊天机器人的描述。 welcome ：欢迎语。 异常返回 { \"rc\":2, \"error\":\"already exists.\" } 返回字段说明： rc ：非0正整数代表不同的异常类型，比如，当前 rc 是2，异常描述为“already exists.”，说明该{{clientId}}已经存在了。 更新聊天机器人 PUT /api/v1/chatbot/:clientId cURL：更新聊天机器人 curl -X PUT \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}} \\ -H 'Content-Type: application/json' \\ -d '{ \"fallback\": \"我不能理解您的意思。\", \"description\": \"聊天机器人\", \"welcome\": \"我的特长是聊天。\" }' 更新聊天机器人 BODY { \"fallback\": \"我不能理解您的意思。\", \"description\": \"聊天机器人\", \"welcome\": \"我的特长是聊天。\" } 字段 必须 类型 描述 fallback 否 string 机器人兜底回复，在多轮对话查询没有匹配到回复时使用。 description 否 string 描述该机器人。 welcome 否 string 欢迎语，保留字段，暂时未使用。 对于机器人的 chatbotID ， name 和 primaryLanguage 都是在创建时设定的，设定后不能变更。 成功返回 { \"rc\": 0, \"data\": { \"chatbotID\": \"{{clientId}}\", \"fallback\": ..., \"description\": ..., \"welcome\": ... } } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获取聊天机器人信息 GET /api/v1/chatbot/:clientId cURL：获取聊天机器人信息 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}} \\ -H 'Content-Type: application/json' 获取聊天机器人信息 BODY null 成功返回 { \"rc\": 0, \"data\": { \"chatbotID\": \"{{clientId}}\", \"name\": \"小叮当\", \"fallback\": \"我不明白您的意思。\", \"description\": \"智能问答和对话任务\", \"welcome\": \"你好！我是机器人客服。\", \"primaryLanguage\": \"zh_CN\" } } 异常返回 { \"rc\": 3, \"error\": \"not exist.\" } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获取聊天机器人列表 GET /api/v1/chatbot cURL：获取聊天机器人列表 curl -X GET \\ 'http://{{IP}}:{{PORT}}/api/v1/chatbot?sortby=-created&q={\"chatbotID\": \"department_1\"}' \\ -H 'Content-Type: application/json' 获取聊天机器人列表 QUERY 支持在URL中添加query信息来查询机器人和翻页等操作，比如 /api/v1/chatbot?page=1&limit=10&fields=chatbotID name&q={\"name\": \"test\"} ，各参数介绍如下： 属性 类型 描述 默认值 示例 limit number 返回本页数据的条数 100 10 page number 返回哪一页(可根据total进行判断) 1 2 fields string 返回哪些字段 除_id 和 __v之外的所有字段 chatbotID name sortby string 按照哪个字段进行排序 空 -created (按照 created 降序) q string 按照字段查询 空 {\"name\": \"test\"} BODY null 成功返回 { \"total\": 1, \"rc\": 0, \"current_page\": 1, \"total_page\": 1, \"data\": [ { \"name\": \"小叮当\", \"chatbotID\": \"{{clientId}}\", \"primaryLanguage\": \"zh_CN\", \"fallback\": \"我不明白您的意思。\", \"welcome\": \"你好！我是机器人客服。\", \"description\": \"智能问答和对话任务\" }, ... ] } 返回字段说明： total 代表聊天机器人数量。 current_page 代表当前页， total_page 代表总页数。 data 是聊天机器人数据。 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 删除一个聊天机器人 DELETE /api/v1/chatbot/:clientId cURL：删除一个聊天机器人 curl -X DELETE \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}} \\ -H 'Content-Type: application/json' \\ 删除一个聊天机器人 BODY null 成功返回 { \"rc\": 0, \"data\": { \"message\": \"done.\" } } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 创建问答对 POST /api/v1/chatbot/:clientId/faq/database cURL：创建问答对 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database \\ -H 'Content-Type: application/json' \\ -d '{ \"post\": \"怎么开通微信支付?\", \"reply\": \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\", \"enabled\": true }' 创建问答对 BODY { \"post\": \"怎么开通微信支付?\", \"reply\": \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\", \"enabled\": true } 字段 必须 类型 描述 post 是 string 问答对的问题，也称“标准问” reply 是 string 问题对应的回复 enabled 是 boolean 是否“启用”，启用代表该问答对在检索时被使用；否则不被检索 成功返回 { \"rc\": 0, \"data\": { \"id\": \"{{docId}}}\" } } 返回字段说明： docId 代表该问答对的唯一标识。 异常返回 { \"rc\": 3, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 查询问答对详情 GET /api/v1/chatbot/:clientId/faq/database/:docId cURL：根据文档Id查询问答对详情 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/{{docId}} \\ -H 'Content-Type: application/json' 根据文档Id查询问答对详情 BODY null 成功返回 { \"rc\": 0, \"data\": { \"id\": \"{{docId}}\", \"post\": \"怎么开通微信支付?\", \"reply\": \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\", \"enabled\": true } } 异常返回 { \"rc\": 3, \"error\": { \"msg\": \"Not Found\" } } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 更新问答对 PUT /api/v1/chatbot/:clientId/faq/database/:docId cURL：根据文档ID更新问答对 curl -X PUT \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/{{docId}} \\ -H 'Content-Type: application/json' \\ -d '{ \"post\": \"怎么开通微信支付?\", \"reply\": \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\", \"enabled\": true }' 根据文档ID更新问答对 BODY { \"post\": \"怎么开通微信支付?\", \"reply\": \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\", \"enabled\": true } 字段 必须 类型 描述 post 否 string 问答对的问题，也称“标准问” reply 否 string 问题对应的回复 enabled 否 boolean 是否“启用”，启用代表该问答对在检索时被使用；否则不被检索 成功返回 { \"rc\": 0, \"data\": { \"id\": \"{{docId}}\" } } 异常返回 { \"rc\": 3, \"error\": { \"msg\": \"Not Found\" } } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 删除问答对 DELETE /api/v1/chatbot/:clientId/faq/database/:docId cURL：根据文档ID删除问答对 curl -X DELETE \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/{{docId}} \\ -H 'Content-Type: application/json' 根据文档ID删除问答对 BODY null 成功返回 { \"rc\": 0, \"message\": \"done\" } 异常返回 { \"rc\": 3, \"error\": { \"msg\": \"Not Found\" } } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 查询问答对列表 GET /api/v1/chatbot/:clientId/faq/database cURL：查询问答对列表，可根据字段查询，支持分页 curl -X GET \\ 'http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database?limit=30' \\ -H 'Content-Type: application/json' 查询问答对列表，可根据字段查询，支持分页 QUERY 在url中，支持使用检索条件，比如 /api/v1/chatbot/{{clientId}}/faq/database?page=1&limit=10 ，各参数介绍如下： 属性 类型 描述 默认值 示例 limit number 返回本页数据的条数 100 10 page number 返回哪一页(可根据total进行判断) 1 2 BODY null 成功返回 { \"total\": 354, \"current_page\": 1, \"total_page\": 12, \"data\": [ { \"post\": \"上架商品就不能修改了是吗？\", \"is_original\": true, \"reply\": \"没有订单产生时可以修改\", \"enabled\": true, \"id\": \"{{docId}}\" }, ... ] } 异常返回 { \"rc\": 3, \"error\": { \"msg\": \"[index_not_found_exception] no such index } } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 创建扩展问 POST /api/v1/chatbot/:clientId/faq/database/:docId/extend cURL：创建扩展问 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/{{docId}}/extend \\ -H 'Content-Type: application/json' \\ -d '{ \"post\": \"怎样支持微信支付?\" } ' 创建扩展问，扩展问关联一个问答对，扩展问是标准问的另一种问法。一个问答对可以关联多个扩展问。 扩展问可以使系统更智能，提高检索的准确率。 BODY { \"post\": \"怎样支持微信支付?\" } 字段 必须 类型 描述 post 是 string 与标准问意思一致的另一种问法，也称“扩展问”。 成功返回 { \"rc\": 0, \"data\": { \"id\": \"{{extendId}}\" } } 返回字段说明： extendId 是该扩展问的唯一标识。 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 查询扩展问 GET /api/v1/chatbot/:clientId/faq/database/:docId/extend cURL：查询扩展问 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/{{docId}}/extend \\ -H 'Content-Type: application/json' 查询扩展问 BODY null 成功返回 { \"total\": 1, \"current_page\": 1, \"total_page\": 1, \"data\": [ { \"post\": \"怎样支持微信支付?\", \"is_original\": false, \"postId\": \"{{docId}}\", \"enabled\": true, \"id\": \"{{extendId}}\" }, ... ], \"rc\": 0 } 异常返回 { \"rc\": 3, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 更新扩展问 PUT /api/v1/chatbot/:clientId/faq/database/:docId/extend/:extendId cURL：更新扩展问 curl -X PUT \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/{{docId}}/extend/{{extendId}} \\ -H 'Content-Type: application/json' \\ -d '{ \"post\": \"怎样支持微信支付?\" } ' 更新扩展问 BODY { \"post\": \"怎样支持微信支付?\" } 字段 必须 类型 描述 post 是 string 与标准问意思一致的另一种问法，也称“扩展问”。 成功返回 { \"rc\": 0, \"data\": { \"id\": \"{{extendId}}\" } } 返回字段说明： extendId 是该扩展问的唯一标识。 异常返回 { \"rc\": 3, \"error\": { \"msg\": \"Not Found\" } } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 删除扩展问 DELETE /api/v1/chatbot/:clientId/faq/database/:docId/extend/:extendId cURL：删除扩展问 curl -X DELETE \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/{{docId}}/extend/{{extendId}} \\ -H 'Content-Type: application/json' 删除扩展问 BODY null 成功返回 { \"rc\": 0, \"message\": \"done\" } 异常返回 { \"rc\": 3, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 导出知识库 GET /api/v1/chatbot/:clientId/faq/database/export cURL：导出问答对数据 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/database/export \\ -H 'Content-Type: application/json' 导出问答对数据 BODY null 成功返回 { \"rc\": 0, \"data\": [ [ true, \"怎么开通微信支付?\", \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\", \"如何支持微信支付\" ], ... ] } 返回字段说明： data 是问答对的所有数据，每个元素代表一个问答对。 每个元素又是一个数组，按照顺序分别代表：[enabled，标准问，回复，0~多个扩展问]。 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 创建近义词 POST /api/v1/chatbot/:clientId/faq/synonyms cURL：创建近义词 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/synonyms \\ -H 'Content-Type: application/json' \\ -d '{ \"text\": \"番茄\", \"neighbors\": [\"西红柿\", \"狼桃\"] }' 创建近义词，近义词可以进一步提高系统的智能水平。 BODY { \"text\": \"番茄\", \"neighbors\": [\"西红柿\", \"狼桃\"] } 字段 必须 类型 描述 text 是 string 词汇 neighbors 是 [string] 与text意思相近的词汇 成功返回 { \"rc\": 0, \"data\": { \"text\": \"番茄\", \"chatbot\": \"{{clientId}}\", \"neighbors\": [ \"西红柿\", \"狼桃\" ], \"id\": \"{{synonymsId}}\" } } 返回字段说明： synonymsId 是该近义词组的唯一标识。 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获取近义词详情 GET /api/v1/chatbot/:clientId/faq/synonyms/:synonymsId cURL：使用synonymsId获取近义词详情 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/synonyms/{{synonymsId}} \\ -H 'Content-Type: application/json' 使用synonymsId获取近义词详情 BODY null 成功返回 { \"rc\": 0, \"data\": { \"text\": \"番茄\", \"neighbors\": [ \"西红柿\", \"狼桃\" ] } } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 更新近义词 PUT /api/v1/chatbot/:clientId/faq/synonyms/:synonymsId cURL：更新近义词 curl -X PUT \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/synonyms/{{synonymsId}} \\ -H 'Content-Type: application/json' \\ -d '{ \"text\": \"番茄\", \"neighbors\": [\"西红柿\", \"狼桃\", \"洋柿子\"] }' 更新近义词 BODY { \"text\": \"番茄\", \"neighbors\": [\"西红柿\", \"狼桃\", \"洋柿子\"] } 成功返回 { \"rc\": 0, \"data\": { \"text\": \"番茄\", \"neighbors\": [ \"西红柿\", \"狼桃\", \"洋柿子\" ] } } 异常返回 { \"rc\": 1, \"error\": ... } 删除近义词 DELETE /api/v1/chatbot/:clientId/faq/synonyms/:synonymsId cURL：删除近义词 curl -X DELETE \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/synonyms/{{synonymsId}} \\ -H 'Content-Type: application/json' 删除近义词 BODY null 成功返回 { \"rc\": 0, \"message\": \"done\" } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 查询近义词列表 GET /api/v1/chatbot/:clientId/faq/synonyms cURL：查询近义词列表，支持分页和按字段查询 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/synonyms \\ -H 'Content-Type: application/json' 查询近义词列表，支持分页和按字段查询 BODY null 成功返回 { \"total\": 1, \"rc\": 0, \"current_page\": 1, \"total_page\": 1, \"data\": [ { \"text\": \"番茄\", \"chatbot\": \"{{clientId}}\", \"neighbors\": [ \"西红柿\", \"狼桃\", \"洋柿子\" ], \"id\": \"{{synonymsId}}\" }, ... ] } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 检索知识库 POST /api/v1/chatbot/:clientId/faq/query cURL：根据查询句子查询答案, 返回答案列表，并带有分数 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/query \\ -H 'Content-Type: application/json' \\ -d '{ \"fromUserId\": \"test\", \"query\": \"如何开通微信支付\" }' fromUserId 代表用户的唯一标识，必填项。 query 代表请求的查询，必填项。 根据查询句子查询答案, 返回答案列表，并带有分数。 BODY { \"fromUserId\": \"xxx\", \"query\": \"如何开通微信支付\" } 字段 必须 类型 描述 fromUserId 是 string 用户的唯一标识 query 是 string 从知识库中检索的目标 成功返回 { \"rc\": 0, \"data\": [ { \"id\": \"{{docId}}\", \"score\": 0.647, \"post\": \"怎么开通微信支付?\", \"reply\": \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\" } ] } 返回字段说明： data 是一个数组，包含0～多个问答对，并且按照匹配程度降序，匹配程度就是该问答对的问题和 query 的相似度。 相似度是属于[0-1]区间的值，越大代表语义越相似。 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 记录FAQ点击事件 POST /api/v1/chatbot/:clientId/faq/click cURL：记录FAQ点击事件 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/faq/click \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"如何开通微信支付\", \"groundtruth\": \"如何支持微信支付\", \"negatives\": [\"如何支持支付\", \"怎么取消微信支付\"] }' 记录FAQ点击事件：在客服人员点击建议问时，将访客的问题和客服点击的问题记录下来。 点击事件具有很重要的价值： 梳理业务，提高商业智能; 方便统计系统使用情况; 评估系统准确率; 优化系统准确率，比如训练更好的机器学习模型。 所以，该接口应保证尽可能调用。 BODY { \"query\": \"如何开通微信支付\", \"groundtruth\": \"如何支持微信支付\", \"negatives\": [\"如何支持支付\", \"怎么取消微信支付\"] } 字段 必须 类型 描述 query 是 string 原始查询 groundtruth 是 string 准确答案 negatives 是 [string] 被展示为建议答案但是没有被选中的候选回复 成功返回 { \"rc\": 0, \"message\": \"done\" } 返回字段说明： 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获得多轮对话列表 GET /api/v1/chatbot/:clientId/conversation cURL：获得对话列表 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation \\ -H 'Content-Type: application/json' 获得对话列表 BODY null 成功返回 { \"rc\": 0, \"total\": 1, \"current_page\": 1, \"total_page\": 1, \"data\": [ { \"chatbotID\": \"{{clientId}}\", \"name\": \"{{conversationName}}\", \"enabled\": true, \"id\": \"{{conversationId}}\" }, ... ] } 返回字段说明： 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获得多轮对话详情 GET /api/v1/chatbot/:clientId/conversation/:conversationId cURL：获得对话详情 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation/{{conversationId}} \\ -H 'Content-Type: application/json' \\ 获得对话详情 BODY null 成功返回 { \"rc\": 0, \"data\": { \"chatbotID\": \"{{clientId}}\", \"name\": \"course\", \"modified\": \"2018-07-11T09:39:58.349Z\", \"created\": \"2018-07-02T12:02:43.037Z\", \"scriptBody\": \"+ _resolve_course_\\n- 您好，我是小云，您的课程顾问，请问您家小孩多大了？\\n\\n+ 一年级老师\\n- ^get_teachers(1)\", \"enabled\": true, \"id\": \"{{conversationId}}\" } } 返回字段说明： 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 启用多轮对话 PUT /api/v1/chatbot/:clientId/conversation/:conversationId/enable cURL：使对话处于\"启用\"状态 curl -X PUT \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation/{{conversationId}}/enable 使对话处于\"启用\"状态 BODY null 成功返回 { \"rc\": 0, \"data\": { \"name\": \"course\", \"chatbotID\": \"{{clientId}}\", \"enabled\": true, \"id\": \"{{conversationId}}\" } } 返回字段说明： 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 禁用多轮对话 PUT /api/v1/chatbot/:clientId/conversation/:conversationId/disable cURL：使对话处于\"禁用\"状态 curl -X PUT \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation/{{conversationId}}/disable \\ 使对话处于\"禁用\"状态 BODY null 成功返回 { \"rc\": 0, \"data\": { \"name\": \"course\", \"chatbotID\": \"{{clientId}}\", \"enabled\": false, \"id\": \"{{conversationId}}\" } } 返回字段说明： 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获取环境变量 GET /api/v1/chatbot/:clientId/conversation/environment cURL：获取环境变量 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation/environment \\ 获取环境变量 环境变量是多轮对话的在“设计阶段”和“部署阶段”不共享的变量。具体应用场景见 多轮对话设计器：快速开始 。 BODY null 成功返回 { \"rc\": 0, \"data\": { \"USERNAME\": \"张三\" } } 返回字段说明： 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 更新环境变量 PUT /api/v1/chatbot/:clientId/conversation/environment cURL：更新环境变量 curl -X PUT \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation/environment \\ -H 'Content-Type: application/json' \\ -d '{ \"USERNAME\": \"李四\", \"PASSWORD\": \"123456\" }' 更新环境变量 BODY { \"USERNAME\": \"李四\", \"PASSWORD\": \"123456\" } 成功返回 { \"rc\": 0, \"msg\": \"done\" } 返回字段说明： 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 检索多轮对话 POST /api/v1/chatbot/:clientId/conversation/query cURL：对话问答查询 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation/query \\ -H 'Content-Type: application/json' \\ -d '{ \"fromUserId\": \"{{uid}}\", \"textMessage\": \"北京今天天气怎么样\", \"isDebug\": false }' 对话问答查询 BODY { \"fromUserId\": \"{{uid}}\", \"textMessage\": \"北京今天天气怎么样\", \"isDebug\": false } 成功返回 { \"rc\": 0, \"data\": { \"state\": \"default\", \"createdAt\": 1543559131688, \"string\": \"我不明白您的意思。\", \"topicName\": null, \"subReplies\": [], \"service\": { \"provider\": \"fallback\" }, \"logic_is_fallback\": true, \"logic_is_unexpected\": true, \"botName\": \"test1\", \"faq\": [ { \"id\": \"AWdjRddmHR0CxALgXwY-\", \"score\": 0.75, \"post\": \"怎么开通微信支付?\", \"reply\": \"登录微信公众号平台，点击左侧微信支付菜单栏，按照开通步骤开通微信支付\" } ] } } 返回字段说明： state 是一些业务需求的约定字段，比如，对话要完成“用户认证”，那么在完成认证后， state 会返回 auth_succ ；认证失败时，返回 auth_fail ，该字段可通过对话脚本设定。 logic_is_fallback 代表该回复是否是兜底。 topicName 代表当前机器人正在聊的话题。 botName 代表聊天机器人的名字。 service 代表返回的数据来源， provider:script 指 多轮对话 ， provider:faq 指 知识库 ；不同数据来源也会提供相应信息。 faq 代表知识库的检索结果，类型为数组，包括每个问答对的详情。 provider key 解释 faq docId 文档ID post 标准问 score 分数 threshold 阀值 conversation 多轮对话 fallback 兜底回复 mute 该用户被该机器人屏蔽 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 回复处理逻辑 多轮对话获取回复的逻辑解释如下： 查询逻辑 用户输入，以文本的形式输入，语音输入也需要转化成文字。 [知识库检索] 如果知识库检索出相似度大于0.8的问答对，直接返回得分最高的问题的答案。 [多轮对话检索] 如果知识库没有检索出相似度大于0.8的问答对，检索多轮对话，如果命中了一个规则，直接返回答案。 [兜底回复] 如果多轮对话也没有检索出答案，返回兜底回复。 导入对话应用 POST /api/v1/chatbot/:clientId/conversation/droplet/import cURL：导入对话应用文件 ZIPFILE=小叮当-1.0.0-conversations.c66 set -x curl -i -X POST -H \"Content-Type: multipart/form-data\" \\ -F \"droplet=@$ZIPFILE\" \\ -F \"USERNAME=李四\" \\ -F \"PASSWORD=123456\" \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/conversation/droplet/import 导入对话应用文件 对话应用文件示例详见 天气查询机器人:多轮对话示例程序 。 BODY multipart表单，环境变量使用 -F 设定键值对，对话应用文件设置 droplet 的文件路径，参考cURL样例程序。 成功返回 { \"rc\": 0, \"data\": { \"msg\": \"Import is done successfully.\" } } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获取用户列表 GET /api/v1/chatbot/:clientId/users cURL：获取用户列表 curl -X GET \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/users \\ -H 'Accept: application/json' \\ -H 'Content-Type: application/json' 获取用户列表 在智能问答引擎中，并不具备管理用户的功能，但是在每次请求**/api/v1/chatbot/{{clientId}}/conversation/query 或 /api/v1/chatbot/{{clientId}}/faq/query 时，在body中传入的 fromUserId**会被保存为一个用户。 在智能问答引擎中，将 chatbotID 下的每个 fromUserId 视为该聊天机器人的用户唯一标识，所以 chatbotID 和 fromUserId 具有联合唯一的性质。 QUERY 在url中，支持使用检索条件，比如 /api/v1/chatbot/{{clientId}}/users?page=1&limit=10 ，各参数介绍如下： 属性 类型 描述 默认值 示例 limit number 返回本页数据的条数 100 10 page number 返回哪一页(可根据total进行判断) 1 2 sortby string 返回值的排序条件 -lasttime (按照最后一次对话时间降序) -created (按照初次对话时间降序), lasttime (按照最后一次对话升序) 成功返回 { \"rc\": 0, \"total\": 1, \"current_page\": 1, \"total_page\": 1, \"data\": [ { \"chatbotID\": \"{{clientId}}\", \"userId\": \"postman\", \"lasttime\": \"2018-10-06T01:22:30.584Z\", \"created\": \"2018-10-06T01:19:30.726Z\" } ] } 返回字段说明： total 代表用户总数量。 current_page 代表当前页， total_page 代表总页数。 data 是用户数据， userId 是用户ID， lasttime 是该用户最后一次对话时间， create 是该用户第一次对话时间。 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 屏蔽指定用户 POST /api/v1/chatbot/:clientId/users/:userId/mute cURL：屏蔽指定用户 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/users/{{userId}}/mute \\ -H 'Content-Type: application/json' 屏蔽用户 根据 chatbotID 和 userId 屏蔽该用户，该用户被屏蔽后，该用户作为 fromUserId 时，发起对轮对话查询时，返回结果如下： { \"rc\": 0, \"data\": { \"state\": \"default\", \"string\": null, \"botName\": \"BOTNAME\", \"logic_is_unexpected\": false, \"service\": { \"provider\": \"mute\" } } } 【提示】返回*service.provider='mute'*的结果。 发起知识库问答时，返回如下结果： { \"rc\": 10, \"error\": \"userId [xxx] is blocked with chatbotID [xxx]\" } 【提示】返回结果 rc=10 。 成功返回 { \"rc\": 0, \"data\": {} } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 检查用户是否被屏蔽 POST /api/v1/chatbot/:clientId/users/:userId/ismute cURL：检查用户是否被屏蔽 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/users/{{userId}}/ismute \\ -H 'Content-Type: application/json' 检查用户是否被屏蔽 根据 chatbotID 和 userId 检查该用户是否被屏蔽。 成功返回 { \"rc\": 0, \"data\": { \"mute\": true } } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 取消屏蔽用户 POST /api/v1/chatbot/:clientId/users/:userId/unmute cURL：取消屏蔽用户 curl -X POST \\ http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/users/{{userId}}/unmute \\ -H 'Content-Type: application/json' 根据chatbotID和userId取消对一个用户的屏蔽。 成功返回 { \"rc\": 0, \"data\": {} } 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 获取用户聊天历史 GET /api/v1/chatbot/:clientId/users/:userId/chats cURL：获取用户聊天历史 curl -X GET \\ 'http://{{IP}}:{{PORT}}/api/v1/chatbot/{{clientId}}/users/{{userId}}/chats?limit=20' \\ -H 'Accept: application/json' \\ -H 'Content-Type: application/json' \\ 获取用户聊天历史 根据 chatbotID 和 userId 获取聊天历史记录 QUERY 在url中，支持使用检索条件，比如 /api/v1/chatbot/{{clientId}}/users/{{userID}}/chats?page=1&limit=10 ，各参数介绍如下： 属性 类型 描述 默认值 示例 limit number 返回本页数据的条数 100 10 page number 返回哪一页(可根据total进行判断) 1 2 sortby string 返回值的排序条件 -created (按照对话时间降序) created (按照初次对话时间升序) 成功返回 { \"rc\": 0, \"total\": 2, \"current_page\": 1, \"total_page\": 1, \"data\": [ { \"chatbotID\": \"gmis_department_11\", \"userId\": \"postman\", \"textMessage\": \"白天不太热也不太冷，风力不大，相信您在这样的天气条件下，应会感到比较清爽和舒适。\", \"direction\": \"outbound\", \"service\": \"conversation\", \"created\": \"2018-10-06T01:58:27.828Z\" }, { \"chatbotID\": \"gmis_department_11\", \"userId\": \"postman\", \"textMessage\": \"北京今天天气怎么样\", \"direction\": \"inbound\", \"created\": \"2018-10-06T01:58:22.270Z\" } ] } 返回字段说明： direction 代表数据传递方向， inbound 是用户发送给聊天机器人， outbound 是聊天机器人发送给用户。 textMessage 发送的文字消息。 service 在发送为 outbound 时，机器人获取答案的服务标识: conversation 代表多轮对话； faq 代表知识库； fallback 代表兜底回复。 异常返回 { \"rc\": 1, \"error\": ... } 返回字段说明： rc 为正整数时，代表异常，异常描述为 error 。 评论"
  },
  "products/chatbot-platform/account.html": {
    "href": "products/chatbot-platform/account.html",
    "title": "账号管理 | Chatopera文档中心",
    "keywords": "账号管理 注册 提示：请保证填写正确的邮箱地址用于找回密码，接收系统通知，该邮箱不会泄漏给第三方。 Chatopera 云服务的地址是： https://bot.chatopera.com 从浏览器打开后，点击“立即使用”，跳转到 登录/注册 页面，输入 邮箱 和 密码 ，使用“回车键”【Enter】提交，即完成。 在登录后，没有做手机号认证的，Chatopera 云服务会主动提示用户绑定手机号，该项目是必须的，未填写手机号的用户无法使用 Chatopera 云服务。 更新密码 登录后，在右上角看到头像，点击头像，在菜单中点击“个人中心”，来到“个人中心”页面后，可填入新的密码，点击“保存”。 找回密码 进入登录页面 https://bot.chatopera.com/login ，点击“忘记密码”，根据提示完成。 此处会使用邮箱验证账号。 修改头像 登录后，在右上角看到头像，点击头像，在菜单中点击“个人中心”，来到“个人中心”页面后，点击屏幕中间的“头像”，弹出上传头像表单。 评论"
  }
}